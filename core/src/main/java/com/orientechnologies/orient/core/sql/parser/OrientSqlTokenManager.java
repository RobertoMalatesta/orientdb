/* OrientSqlTokenManager.java */
/* Generated By:JJTree&JavaCC: Do not edit this line. OrientSqlTokenManager.java */
package com.orientechnologies.orient.core.sql.parser;

/** Token Manager. */
@SuppressWarnings("unused")
public class OrientSqlTokenManager implements OrientSqlConstants {

  /** Debug output. */
  public java.io.PrintStream debugStream = System.out;

  /** Set debug output. */
  public void setDebugStream(java.io.PrintStream ds) {
    debugStream = ds;
  }

  private int jjStopAtPos(int pos, int kind) {
    jjmatchedKind = kind;
    jjmatchedPos = pos;
    return pos + 1;
  }

  private int jjMoveStringLiteralDfa0_0() {
    switch (curChar) {
      case 8:
        jjmatchedKind = 6;
        return jjMoveNfa_0(3, 0);
      case 9:
        jjmatchedKind = 2;
        return jjMoveNfa_0(3, 0);
      case 10:
        jjmatchedKind = 3;
        return jjMoveNfa_0(3, 0);
      case 12:
        jjmatchedKind = 5;
        return jjMoveNfa_0(3, 0);
      case 13:
        jjmatchedKind = 4;
        return jjMoveNfa_0(3, 0);
      case 32:
        jjmatchedKind = 1;
        return jjMoveNfa_0(3, 0);
      case 33:
        jjmatchedKind = 209;
        return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x800000L, 0x0L);
      case 34:
        return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x20000000000L, 0x0L, 0x0L);
      case 35:
        jjmatchedKind = 272;
        return jjMoveNfa_0(3, 0);
      case 36:
        jjmatchedKind = 203;
        return jjMoveNfa_0(3, 0);
      case 37:
        jjmatchedKind = 229;
        return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x400000000000L, 0x0L);
      case 38:
        jjmatchedKind = 225;
        return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x80004000000L, 0x0L);
      case 40:
        jjmatchedKind = 193;
        return jjMoveNfa_0(3, 0);
      case 41:
        jjmatchedKind = 194;
        return jjMoveNfa_0(3, 0);
      case 42:
        jjmatchedKind = 223;
        return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x20000000000L, 0x0L);
      case 43:
        jjmatchedKind = 221;
        return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x8008000000L, 0x0L);
      case 44:
        jjmatchedKind = 200;
        return jjMoveNfa_0(3, 0);
      case 45:
        jjmatchedKind = 222;
        return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x10010000000L, 0x3ff80000L);
      case 46:
        jjmatchedKind = 201;
        return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x30000000000000L, 0x0L);
      case 47:
        jjmatchedKind = 224;
        return jjMoveStringLiteralDfa1_0(0x100L, 0x0L, 0x0L, 0x40000000000L, 0x0L);
      case 58:
        jjmatchedKind = 212;
        return jjMoveNfa_0(3, 0);
      case 59:
        jjmatchedKind = 199;
        return jjMoveNfa_0(3, 0);
      case 60:
        jjmatchedKind = 207;
        return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x804001200000L, 0x0L);
      case 61:
        jjmatchedKind = 205;
        return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x4000L, 0x0L);
      case 62:
        jjmatchedKind = 208;
        return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0xf000000400000L, 0x0L);
      case 63:
        jjmatchedKind = 211;
        return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x400000000L, 0x0L);
      case 64:
        jjmatchedKind = 202;
        return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x14000000000L, 0x0L, 0x0L);
      case 65:
        return jjMoveStringLiteralDfa1_0(0x43001040000000L, 0x1000000860000000L, 0x0L, 0x0L, 0x0L);
      case 66:
        return jjMoveStringLiteralDfa1_0(
            0x20240000000000L, 0x20L, 0x1004L, 0x400000000000000L, 0x0L);
      case 67:
        return jjMoveStringLiteralDfa1_0(
            0x3000000200010000L, 0x406010005000L, 0x40888L, 0xf800000000000000L, 0x11L);
      case 68:
        return jjMoveStringLiteralDfa1_0(
            0x4008000020000L, 0x4028000000010L, 0x1008084000L, 0x0L, 0x0L);
      case 69:
        return jjMoveStringLiteralDfa1_0(0x80000L, 0x880810008040000L, 0x1000040L, 0x0L, 0x0L);
      case 70:
        return jjMoveStringLiteralDfa1_0(
            0x8000000400000L, 0x4000080002000000L, 0x8000002000100L, 0x0L, 0x0L);
      case 71:
        return jjMoveStringLiteralDfa1_0(0x20000000000L, 0x100000000000000L, 0x0L, 0x0L, 0x0L);
      case 72:
        return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x100000L, 0x0L, 0x0L);
      case 73:
        return jjMoveStringLiteralDfa1_0(
            0x804008000L, 0x42200000000000L, 0x20000221L, 0x280000000000000L, 0x8L);
      case 75:
        return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x4L);
      case 76:
        return jjMoveStringLiteralDfa1_0(
            0x880080000000000L, 0x10000000000040L, 0x2L, 0x100000000000000L, 0x0L);
      case 77:
        return jjMoveStringLiteralDfa1_0(0x100004000L, 0x100000000c00L, 0x4000000L, 0x0L, 0x2L);
      case 78:
        return jjMoveStringLiteralDfa1_0(
            0xc000004000000000L, 0x2000000080000081L, 0x0L, 0x40000000000000L, 0x0L);
      case 79:
        return jjMoveStringLiteralDfa1_0(0x412000000000L, 0x8000200600000L, 0x20000L, 0x0L, 0x0L);
      case 80:
        return jjMoveStringLiteralDfa1_0(
            0x80000000L, 0x8000040001080004L, 0x810000000L, 0x0L, 0x0L);
      case 82:
        return jjMoveStringLiteralDfa1_0(
            0x510000400000000L, 0x601001004000000L, 0x240000010L, 0x0L, 0x0L);
      case 83:
        return jjMoveStringLiteralDfa1_0(0x100020001000L, 0x50010a008L, 0x2400e1a400L, 0x0L, 0x0L);
      case 84:
        return jjMoveStringLiteralDfa1_0(
            0x800000802000L, 0x20000000800000L, 0x4000000000000L, 0x0L, 0x0L);
      case 85:
        return jjMoveStringLiteralDfa1_0(0x300000L, 0x20202L, 0x180000000L, 0x0L, 0x0L);
      case 86:
        return jjMoveStringLiteralDfa1_0(0x18040000L, 0x10000L, 0x0L, 0x0L, 0x0L);
      case 87:
        return jjMoveStringLiteralDfa1_0(0x200000003000000L, 0x100L, 0x0L, 0x0L, 0x0L);
      case 91:
        jjmatchedKind = 197;
        return jjMoveNfa_0(3, 0);
      case 93:
        jjmatchedKind = 198;
        return jjMoveNfa_0(3, 0);
      case 94:
        jjmatchedKind = 228;
        return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x200000000000L, 0x0L);
      case 95:
        return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x20000L);
      case 96:
        jjmatchedKind = 204;
        return jjMoveNfa_0(3, 0);
      case 97:
        return jjMoveStringLiteralDfa1_0(0x43001040000000L, 0x1000000860000000L, 0x0L, 0x0L, 0x0L);
      case 98:
        return jjMoveStringLiteralDfa1_0(
            0x20240000000000L, 0x20L, 0x1004L, 0x400000000000000L, 0x0L);
      case 99:
        return jjMoveStringLiteralDfa1_0(
            0x3000000200010000L, 0x406010005000L, 0x40888L, 0xf800000000000000L, 0x11L);
      case 100:
        return jjMoveStringLiteralDfa1_0(
            0x4008000020000L, 0x4028000000010L, 0x1008084000L, 0x0L, 0x0L);
      case 101:
        return jjMoveStringLiteralDfa1_0(0x80000L, 0x880810008040000L, 0x1000040L, 0x0L, 0x0L);
      case 102:
        return jjMoveStringLiteralDfa1_0(
            0x8000000400000L, 0x4000080002000000L, 0x8000002000100L, 0x0L, 0x0L);
      case 103:
        return jjMoveStringLiteralDfa1_0(0x20000000000L, 0x100000000000000L, 0x0L, 0x0L, 0x0L);
      case 104:
        return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x100000L, 0x0L, 0x0L);
      case 105:
        return jjMoveStringLiteralDfa1_0(
            0x804008000L, 0x42200000000000L, 0x20000221L, 0x280000000000000L, 0x8L);
      case 107:
        return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x4L);
      case 108:
        return jjMoveStringLiteralDfa1_0(
            0x880080000000000L, 0x10000000000040L, 0x2L, 0x100000000000000L, 0x0L);
      case 109:
        return jjMoveStringLiteralDfa1_0(0x100004000L, 0x100000000c00L, 0x4000000L, 0x0L, 0x2L);
      case 110:
        return jjMoveStringLiteralDfa1_0(
            0xc000004000000000L, 0x2000000080000081L, 0x0L, 0x40000000000000L, 0x0L);
      case 111:
        return jjMoveStringLiteralDfa1_0(0x412000000000L, 0x8000200600000L, 0x20000L, 0x0L, 0x0L);
      case 112:
        return jjMoveStringLiteralDfa1_0(
            0x80000000L, 0x8000040001080004L, 0x810000000L, 0x0L, 0x0L);
      case 114:
        return jjMoveStringLiteralDfa1_0(
            0x510000400000000L, 0x601001004000000L, 0x240000010L, 0x0L, 0x40000L);
      case 115:
        return jjMoveStringLiteralDfa1_0(0x100020001000L, 0x50010a008L, 0x2400e1a400L, 0x0L, 0x0L);
      case 116:
        return jjMoveStringLiteralDfa1_0(
            0x800000802000L, 0x20000000800000L, 0x4000000000000L, 0x0L, 0x0L);
      case 117:
        return jjMoveStringLiteralDfa1_0(0x300000L, 0x20202L, 0x180000000L, 0x0L, 0x0L);
      case 118:
        return jjMoveStringLiteralDfa1_0(0x18040000L, 0x10000L, 0x0L, 0x0L, 0x0L);
      case 119:
        return jjMoveStringLiteralDfa1_0(0x200000003000000L, 0x100L, 0x0L, 0x0L, 0x0L);
      case 123:
        jjmatchedKind = 195;
        return jjMoveNfa_0(3, 0);
      case 124:
        jjmatchedKind = 227;
        return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x100002000000L, 0x0L);
      case 125:
        jjmatchedKind = 196;
        return jjMoveNfa_0(3, 0);
      case 126:
        jjmatchedKind = 210;
        return jjMoveNfa_0(3, 0);
      default:
        return jjMoveNfa_0(3, 0);
    }
  }

  private int jjMoveStringLiteralDfa1_0(
      long active0, long active1, long active2, long active3, long active4) {
    try {
      curChar = input_stream.readChar();
    } catch (java.io.IOException e) {
      return jjMoveNfa_0(3, 0);
    }
    switch (curChar) {
      case 38:
        if ((active3 & 0x4000000L) != 0L) {
          jjmatchedKind = 218;
          jjmatchedPos = 1;
        }
        break;
      case 42:
        if ((active0 & 0x100L) != 0L) {
          jjmatchedKind = 8;
          jjmatchedPos = 1;
        }
        break;
      case 43:
        if ((active3 & 0x8000000L) != 0L) {
          jjmatchedKind = 219;
          jjmatchedPos = 1;
        }
        break;
      case 45:
        if ((active3 & 0x10000000L) != 0L) {
          jjmatchedKind = 220;
          jjmatchedPos = 1;
        }
        break;
      case 46:
        if ((active3 & 0x20000000000000L) != 0L) {
          jjmatchedKind = 245;
          jjmatchedPos = 1;
        }
        return jjMoveStringLiteralDfa2_0(
            active0, 0L, active1, 0L, active2, 0L, active3, 0x10000000000000L, active4, 0L);
      case 60:
        if ((active3 & 0x4000000000L) != 0L) {
          jjmatchedKind = 230;
          jjmatchedPos = 1;
        }
        return jjMoveStringLiteralDfa2_0(
            active0, 0L, active1, 0L, active2, 0L, active3, 0x800000000000L, active4, 0L);
      case 61:
        if ((active3 & 0x4000L) != 0L) {
          jjmatchedKind = 206;
          jjmatchedPos = 1;
        } else if ((active3 & 0x200000L) != 0L) {
          jjmatchedKind = 213;
          jjmatchedPos = 1;
        } else if ((active3 & 0x400000L) != 0L) {
          jjmatchedKind = 214;
          jjmatchedPos = 1;
        } else if ((active3 & 0x800000L) != 0L) {
          jjmatchedKind = 215;
          jjmatchedPos = 1;
        } else if ((active3 & 0x8000000000L) != 0L) {
          jjmatchedKind = 231;
          jjmatchedPos = 1;
        } else if ((active3 & 0x10000000000L) != 0L) {
          jjmatchedKind = 232;
          jjmatchedPos = 1;
        } else if ((active3 & 0x20000000000L) != 0L) {
          jjmatchedKind = 233;
          jjmatchedPos = 1;
        } else if ((active3 & 0x40000000000L) != 0L) {
          jjmatchedKind = 234;
          jjmatchedPos = 1;
        } else if ((active3 & 0x80000000000L) != 0L) {
          jjmatchedKind = 235;
          jjmatchedPos = 1;
        } else if ((active3 & 0x100000000000L) != 0L) {
          jjmatchedKind = 236;
          jjmatchedPos = 1;
        } else if ((active3 & 0x200000000000L) != 0L) {
          jjmatchedKind = 237;
          jjmatchedPos = 1;
        } else if ((active3 & 0x400000000000L) != 0L) {
          jjmatchedKind = 238;
          jjmatchedPos = 1;
        }
        break;
      case 62:
        if ((active3 & 0x1000000L) != 0L) {
          jjmatchedKind = 216;
          jjmatchedPos = 1;
        } else if ((active3 & 0x4000000000000L) != 0L) {
          jjmatchedKind = 242;
          jjmatchedPos = 1;
        }
        return jjMoveStringLiteralDfa2_0(
            active0, 0L, active1, 0L, active2, 0L, active3, 0xb000000000000L, active4, 0L);
      case 63:
        if ((active3 & 0x400000000L) != 0L) {
          jjmatchedKind = 226;
          jjmatchedPos = 1;
        }
        break;
      case 64:
        return jjMoveStringLiteralDfa2_0(
            active0, 0L, active1, 0L, active2, 0x20000000000L, active3, 0L, active4, 0L);
      case 65:
        if ((active2 & 0x100000L) != 0L) {
          jjmatchedKind = 148;
          jjmatchedPos = 1;
        }
        return jjMoveStringLiteralDfa2_0(
            active0,
            0x1200200018004000L,
            active1,
            0x8004000080000404L,
            active2,
            0x8000010000102L,
            active3,
            0L,
            active4,
            0x2L);
      case 66:
        return jjMoveStringLiteralDfa2_0(
            active0, 0L, active1, 0x20000000L, active2, 0L, active3, 0L, active4, 0L);
      case 68:
        if ((active1 & 0x2000000000000L) != 0L) {
          jjmatchedKind = 113;
          jjmatchedPos = 1;
        }
        return jjMoveStringLiteralDfa2_0(
            active0,
            0x40080000L,
            active1,
            0x800000000L,
            active2,
            0x20000001L,
            active3,
            0L,
            active4,
            0L);
      case 69:
        return jjMoveStringLiteralDfa2_0(
            active0,
            0xd3c008520061000L,
            active1,
            0x601109004000090L,
            active2,
            0x140840c004L,
            active3,
            0x400000000000000L,
            active4,
            0x4L);
      case 70:
        if ((active2 & 0x20L) != 0L) {
          jjmatchedKind = 133;
          jjmatchedPos = 1;
        }
        return jjMoveStringLiteralDfa2_0(
            active0, 0x40400000000000L, active1, 0x400000L, active2, 0L, active3, 0L, active4, 0L);
      case 72:
        return jjMoveStringLiteralDfa2_0(
            active0, 0x3000000L, active1, 0x100000000L, active2, 0x2000L, active3, 0L, active4, 0L);
      case 73:
        return jjMoveStringLiteralDfa2_0(
            active0,
            0x880000000000L,
            active1,
            0x10000002010900L,
            active2,
            0x200080000L,
            active3,
            0x100000000000000L,
            active4,
            0L);
      case 75:
        return jjMoveStringLiteralDfa2_0(
            active0, 0x100000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L);
      case 76:
        return jjMoveStringLiteralDfa2_0(
            active0,
            0L,
            active1,
            0x1000004050005000L,
            active2,
            0x1440L,
            active3,
            0L,
            active4,
            0x10L);
      case 78:
        if ((active1 & 0x200000L) != 0L) {
          jjmatchedKind = 85;
          jjmatchedPos = 1;
        } else if ((active3 & 0x80000000000000L) != 0L) {
          jjmatchedKind = 247;
          jjmatchedPos = 1;
        }
        return jjMoveStringLiteralDfa2_0(
            active0,
            0x1804008000L,
            active1,
            0x40a10000000202L,
            active2,
            0L,
            active3,
            0L,
            active4,
            0x8L);
      case 79:
        if ((active0 & 0x800000L) != 0L) {
          jjmatchedKind = 23;
          jjmatchedPos = 1;
        }
        return jjMoveStringLiteralDfa2_0(
            active0,
            0xc080000200000000L,
            active1,
            0x2000480001000001L,
            active2,
            0x846040898L,
            active3,
            0xf840000000000000L,
            active4,
            0x1L);
      case 80:
        return jjMoveStringLiteralDfa2_0(
            active0,
            0x300000L,
            active1,
            0x8000000020000L,
            active2,
            0x20000L,
            active3,
            0L,
            active4,
            0L);
      case 82:
        if ((active0 & 0x2000000000L) != 0L) {
          jjmatchedKind = 37;
          jjmatchedPos = 1;
        }
        return jjMoveStringLiteralDfa2_0(
            active0,
            0x30000412000L,
            active1,
            0x100060000880020L,
            active2,
            0x4010000000000L,
            active3,
            0L,
            active4,
            0L);
      case 83:
        if ((active0 & 0x2000000000000L) != 0L) {
          jjmatchedKind = 49;
          jjmatchedPos = 1;
        } else if ((active3 & 0x200000000000000L) != 0L) {
          jjmatchedKind = 249;
          jjmatchedPos = 1;
        }
        return jjMoveStringLiteralDfa2_0(
            active0,
            0x1000000000000L,
            active1,
            0L,
            active2,
            0x180000200L,
            active3,
            0L,
            active4,
            0L);
      case 84:
        return jjMoveStringLiteralDfa2_0(
            active0, 0L, active1, 0x400100008L, active2, 0x4000210000L, active3, 0L, active4, 0L);
      case 85:
        return jjMoveStringLiteralDfa2_0(
            active0,
            0x4080000000L,
            active1,
            0x400000200000a040L,
            active2,
            0L,
            active3,
            0L,
            active4,
            0L);
      case 86:
        return jjMoveStringLiteralDfa2_0(
            active0, 0L, active1, 0x200000000L, active2, 0L, active3, 0L, active4, 0L);
      case 88:
        return jjMoveStringLiteralDfa2_0(
            active0,
            0L,
            active1,
            0x880000008040000L,
            active2,
            0x1000000L,
            active3,
            0L,
            active4,
            0L);
      case 89:
        if ((active0 & 0x40000000000L) != 0L) {
          jjmatchedKind = 42;
          jjmatchedPos = 1;
        }
        return jjMoveStringLiteralDfa2_0(
            active0,
            0x2000000000000000L,
            active1,
            0x20000000000000L,
            active2,
            0x2000800000L,
            active3,
            0L,
            active4,
            0L);
      case 95:
        return jjMoveStringLiteralDfa2_0(
            active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x20000L);
      case 97:
        if ((active2 & 0x100000L) != 0L) {
          jjmatchedKind = 148;
          jjmatchedPos = 1;
        }
        return jjMoveStringLiteralDfa2_0(
            active0,
            0x1200200018004000L,
            active1,
            0x8004000080000404L,
            active2,
            0x8000010000102L,
            active3,
            0L,
            active4,
            0x1000002L);
      case 98:
        return jjMoveStringLiteralDfa2_0(
            active0, 0L, active1, 0x20000000L, active2, 0L, active3, 0L, active4, 0L);
      case 100:
        if ((active1 & 0x2000000000000L) != 0L) {
          jjmatchedKind = 113;
          jjmatchedPos = 1;
        }
        return jjMoveStringLiteralDfa2_0(
            active0,
            0x40080000L,
            active1,
            0x800000000L,
            active2,
            0x20000001L,
            active3,
            0L,
            active4,
            0x100000L);
      case 101:
        return jjMoveStringLiteralDfa2_0(
            active0,
            0xd3c008520061000L,
            active1,
            0x601109004000090L,
            active2,
            0x140840c004L,
            active3,
            0x400000000000000L,
            active4,
            0x4L);
      case 102:
        if ((active2 & 0x20L) != 0L) {
          jjmatchedKind = 133;
          jjmatchedPos = 1;
        }
        return jjMoveStringLiteralDfa2_0(
            active0,
            0x40400000000000L,
            active1,
            0x400000L,
            active2,
            0L,
            active3,
            0L,
            active4,
            0x1c000000L);
      case 104:
        return jjMoveStringLiteralDfa2_0(
            active0, 0x3000000L, active1, 0x100000000L, active2, 0x2000L, active3, 0L, active4, 0L);
      case 105:
        return jjMoveStringLiteralDfa2_0(
            active0,
            0x880000000000L,
            active1,
            0x10000002010900L,
            active2,
            0x200080000L,
            active3,
            0x100000000000000L,
            active4,
            0L);
      case 107:
        return jjMoveStringLiteralDfa2_0(
            active0, 0x100000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L);
      case 108:
        return jjMoveStringLiteralDfa2_0(
            active0,
            0L,
            active1,
            0x1000004050005000L,
            active2,
            0x1440L,
            active3,
            0L,
            active4,
            0xa00010L);
      case 109:
        return jjMoveStringLiteralDfa2_0(
            active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x20400000L);
      case 110:
        if ((active1 & 0x200000L) != 0L) {
          jjmatchedKind = 85;
          jjmatchedPos = 1;
        } else if ((active3 & 0x80000000000000L) != 0L) {
          jjmatchedKind = 247;
          jjmatchedPos = 1;
        }
        return jjMoveStringLiteralDfa2_0(
            active0,
            0x1804008000L,
            active1,
            0x40a10000000202L,
            active2,
            0L,
            active3,
            0L,
            active4,
            0x8L);
      case 111:
        if ((active0 & 0x800000L) != 0L) {
          jjmatchedKind = 23;
          jjmatchedPos = 1;
        }
        return jjMoveStringLiteralDfa2_0(
            active0,
            0xc080000200000000L,
            active1,
            0x2000480001000001L,
            active2,
            0x846040898L,
            active3,
            0xf840000000000000L,
            active4,
            0x2040001L);
      case 112:
        return jjMoveStringLiteralDfa2_0(
            active0,
            0x300000L,
            active1,
            0x8000000020000L,
            active2,
            0x20000L,
            active3,
            0L,
            active4,
            0L);
      case 114:
        if ((active0 & 0x2000000000L) != 0L) {
          jjmatchedKind = 37;
          jjmatchedPos = 1;
        }
        return jjMoveStringLiteralDfa2_0(
            active0,
            0x30000412000L,
            active1,
            0x100060000880020L,
            active2,
            0x4010000000000L,
            active3,
            0L,
            active4,
            0L);
      case 115:
        if ((active0 & 0x2000000000000L) != 0L) {
          jjmatchedKind = 49;
          jjmatchedPos = 1;
        } else if ((active3 & 0x200000000000000L) != 0L) {
          jjmatchedKind = 249;
          jjmatchedPos = 1;
        }
        return jjMoveStringLiteralDfa2_0(
            active0,
            0x1000000000000L,
            active1,
            0L,
            active2,
            0x180000200L,
            active3,
            0L,
            active4,
            0x80000L);
      case 116:
        return jjMoveStringLiteralDfa2_0(
            active0, 0L, active1, 0x400100008L, active2, 0x4000210000L, active3, 0L, active4, 0L);
      case 117:
        return jjMoveStringLiteralDfa2_0(
            active0,
            0x4080000000L,
            active1,
            0x400000200000a040L,
            active2,
            0L,
            active3,
            0L,
            active4,
            0L);
      case 118:
        return jjMoveStringLiteralDfa2_0(
            active0, 0L, active1, 0x200000000L, active2, 0L, active3, 0L, active4, 0L);
      case 120:
        return jjMoveStringLiteralDfa2_0(
            active0,
            0L,
            active1,
            0x880000008040000L,
            active2,
            0x1000000L,
            active3,
            0L,
            active4,
            0L);
      case 121:
        if ((active0 & 0x40000000000L) != 0L) {
          jjmatchedKind = 42;
          jjmatchedPos = 1;
        }
        return jjMoveStringLiteralDfa2_0(
            active0,
            0x2000000000000000L,
            active1,
            0x20000000000000L,
            active2,
            0x2000800000L,
            active3,
            0L,
            active4,
            0L);
      case 124:
        if ((active3 & 0x2000000L) != 0L) {
          jjmatchedKind = 217;
          jjmatchedPos = 1;
        }
        break;
      default:
        break;
    }
    return jjMoveNfa_0(3, 1);
  }

  private int jjMoveStringLiteralDfa2_0(
      long old0,
      long active0,
      long old1,
      long active1,
      long old2,
      long active2,
      long old3,
      long active3,
      long old4,
      long active4) {
    if (((active0 &= old0)
            | (active1 &= old1)
            | (active2 &= old2)
            | (active3 &= old3)
            | (active4 &= old4))
        == 0L) return jjMoveNfa_0(3, 1);
    try {
      curChar = input_stream.readChar();
    } catch (java.io.IOException e) {
      return jjMoveNfa_0(3, 1);
    }
    switch (curChar) {
      case 46:
        if ((active3 & 0x10000000000000L) != 0L) {
          jjmatchedKind = 244;
          jjmatchedPos = 2;
        }
        break;
      case 61:
        if ((active3 & 0x800000000000L) != 0L) {
          jjmatchedKind = 239;
          jjmatchedPos = 2;
        } else if ((active3 & 0x1000000000000L) != 0L) {
          jjmatchedKind = 240;
          jjmatchedPos = 2;
        }
        break;
      case 62:
        if ((active3 & 0x8000000000000L) != 0L) {
          jjmatchedKind = 243;
          jjmatchedPos = 2;
        }
        return jjMoveStringLiteralDfa3_0(
            active0, 0L, active1, 0L, active2, 0L, active3, 0x2000000000000L, active4, 0L);
      case 64:
        return jjMoveStringLiteralDfa3_0(
            active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x20000L);
      case 65:
        return jjMoveStringLiteralDfa3_0(
            active0,
            0x2000L,
            active1,
            0x500000000005080L,
            active2,
            0x212000L,
            active3,
            0L,
            active4,
            0L);
      case 66:
        return jjMoveStringLiteralDfa3_0(
            active0, 0L, active1, 0x1000000000000L, active2, 0L, active3, 0L, active4, 0L);
      case 67:
        if ((active0 & 0x1000000000000L) != 0L) {
          jjmatchedKind = 48;
          jjmatchedPos = 2;
        }
        return jjMoveStringLiteralDfa3_0(
            active0,
            0x7180000800000000L,
            active1,
            0x10000040041L,
            active2,
            0x400000000L,
            active3,
            0L,
            active4,
            0L);
      case 68:
        if ((active0 & 0x40000000L) != 0L) {
          jjmatchedKind = 30;
          jjmatchedPos = 2;
        } else if ((active0 & 0x1000000000L) != 0L) {
          jjmatchedKind = 36;
          jjmatchedPos = 2;
        } else if ((active2 & 0x200000000L) != 0L) {
          jjmatchedKind = 161;
          jjmatchedPos = 2;
        }
        return jjMoveStringLiteralDfa3_0(
            active0,
            0x10000100000L,
            active1,
            0x200800020000L,
            active2,
            0L,
            active3,
            0L,
            active4,
            0L);
      case 69:
        return jjMoveStringLiteralDfa3_0(
            active0,
            0x1010000L,
            active1,
            0x800000200010020L,
            active2,
            0x1a0000401L,
            active3,
            0L,
            active4,
            0L);
      case 70:
        if ((active1 & 0x400000L) != 0L) {
          jjmatchedKind = 86;
          jjmatchedPos = 2;
        }
        return jjMoveStringLiteralDfa3_0(
            active0,
            0x20408000000000L,
            active1,
            0x4000000L,
            active2,
            0x1000004000L,
            active3,
            0L,
            active4,
            0L);
      case 71:
        return jjMoveStringLiteralDfa3_0(
            active0, 0x80000L, active1, 0x800000000000L, active2, 0x4L, active3, 0L, active4, 0L);
      case 72:
        return jjMoveStringLiteralDfa3_0(
            active0, 0L, active1, 0L, active2, 0x4000000000L, active3, 0L, active4, 0L);
      case 73:
        return jjMoveStringLiteralDfa3_0(
            active0,
            0x200100002000000L,
            active1,
            0L,
            active2,
            0x10001000100L,
            active3,
            0L,
            active4,
            0L);
      case 75:
        return jjMoveStringLiteralDfa3_0(
            active0, 0L, active1, 0L, active2, 0L, active3, 0x100000000000000L, active4, 0L);
      case 76:
        if ((active1 & 0x1000000000000000L) != 0L) {
          jjmatchedKind = 124;
          jjmatchedPos = 2;
        }
        return jjMoveStringLiteralDfa3_0(
            active0,
            0x8000004018021000L,
            active1,
            0x400001000000L,
            active2,
            0x8000840000010L,
            active3,
            0L,
            active4,
            0L);
      case 77:
        return jjMoveStringLiteralDfa3_0(
            active0,
            0x880400000000L,
            active1,
            0x1080000000L,
            active2,
            0x8L,
            active3,
            0L,
            active4,
            0L);
      case 78:
        return jjMoveStringLiteralDfa3_0(
            active0,
            0x200000000L,
            active1,
            0x6010000002000800L,
            active2,
            0x800882L,
            active3,
            0xf800000000000000L,
            active4,
            0x1L);
      case 79:
        return jjMoveStringLiteralDfa3_0(
            active0,
            0x20000400000L,
            active1,
            0x60100180000L,
            active2,
            0x1200L,
            active3,
            0L,
            active4,
            0L);
      case 80:
        return jjMoveStringLiteralDfa3_0(
            active0, 0L, active1, 0xa000000000a010L, active2, 0x8000000L, active3, 0L, active4, 0L);
      case 81:
        return jjMoveStringLiteralDfa3_0(
            active0, 0L, active1, 0L, active2, 0x8000L, active3, 0L, active4, 0L);
      case 82:
        return jjMoveStringLiteralDfa3_0(
            active0,
            0x100040000L,
            active1,
            0x800008040000000cL,
            active2,
            0x20002400000L,
            active3,
            0L,
            active4,
            0L);
      case 83:
        return jjMoveStringLiteralDfa3_0(
            active0,
            0x4000000208000L,
            active1,
            0xa020000002L,
            active2,
            0x2000080040L,
            active3,
            0L,
            active4,
            0x8L);
      case 84:
        if ((active0 & 0x20000000L) != 0L) {
          jjmatchedKind = 29;
          jjmatchedPos = 2;
        } else if ((active0 & 0x80000000L) != 0L) {
          jjmatchedKind = 31;
          jjmatchedPos = 2;
        } else if ((active0 & 0x800000000000000L) != 0L) {
          jjmatchedKind = 59;
          jjmatchedPos = 2;
        } else if ((active3 & 0x40000000000000L) != 0L) {
          jjmatchedKind = 246;
          jjmatchedPos = 2;
        }
        return jjMoveStringLiteralDfa3_0(
            active0,
            0x458200004004000L,
            active1,
            0xc100048000100L,
            active2,
            0x10020000L,
            active3,
            0x400000000000000L,
            active4,
            0x2L);
      case 85:
        return jjMoveStringLiteralDfa3_0(
            active0,
            0L,
            active1,
            0x4010800000L,
            active2,
            0x4000000040000L,
            active3,
            0L,
            active4,
            0x10L);
      case 86:
        return jjMoveStringLiteralDfa3_0(
            active0,
            0L,
            active1,
            0x240000000000000L,
            active2,
            0x4000000L,
            active3,
            0L,
            active4,
            0L);
      case 87:
        return jjMoveStringLiteralDfa3_0(
            active0, 0L, active1, 0x200L, active2, 0L, active3, 0L, active4, 0L);
      case 88:
        return jjMoveStringLiteralDfa3_0(
            active0, 0L, active1, 0x400L, active2, 0L, active3, 0L, active4, 0L);
      case 89:
        if ((active4 & 0x4L) != 0L) {
          jjmatchedKind = 258;
          jjmatchedPos = 2;
        }
        break;
      case 97:
        return jjMoveStringLiteralDfa3_0(
            active0,
            0x2000L,
            active1,
            0x500000000005080L,
            active2,
            0x212000L,
            active3,
            0L,
            active4,
            0x200000L);
      case 98:
        if ((active4 & 0x100000L) != 0L) {
          jjmatchedKind = 276;
          jjmatchedPos = 2;
        }
        return jjMoveStringLiteralDfa3_0(
            active0, 0L, active1, 0x1000000000000L, active2, 0L, active3, 0L, active4, 0L);
      case 99:
        if ((active0 & 0x1000000000000L) != 0L) {
          jjmatchedKind = 48;
          jjmatchedPos = 2;
        }
        return jjMoveStringLiteralDfa3_0(
            active0,
            0x7180000800000000L,
            active1,
            0x10000040041L,
            active2,
            0x400000000L,
            active3,
            0L,
            active4,
            0L);
      case 100:
        if ((active0 & 0x40000000L) != 0L) {
          jjmatchedKind = 30;
          jjmatchedPos = 2;
        } else if ((active0 & 0x1000000000L) != 0L) {
          jjmatchedKind = 36;
          jjmatchedPos = 2;
        } else if ((active2 & 0x200000000L) != 0L) {
          jjmatchedKind = 161;
          jjmatchedPos = 2;
        }
        return jjMoveStringLiteralDfa3_0(
            active0,
            0x10000100000L,
            active1,
            0x200800020000L,
            active2,
            0L,
            active3,
            0L,
            active4,
            0L);
      case 101:
        return jjMoveStringLiteralDfa3_0(
            active0,
            0x1010000L,
            active1,
            0x800000200010020L,
            active2,
            0x1a0000401L,
            active3,
            0L,
            active4,
            0x20480000L);
      case 102:
        if ((active1 & 0x400000L) != 0L) {
          jjmatchedKind = 86;
          jjmatchedPos = 2;
        }
        return jjMoveStringLiteralDfa3_0(
            active0,
            0x20408000000000L,
            active1,
            0x4000000L,
            active2,
            0x1000004000L,
            active3,
            0L,
            active4,
            0L);
      case 103:
        return jjMoveStringLiteralDfa3_0(
            active0, 0x80000L, active1, 0x800000000000L, active2, 0x4L, active3, 0L, active4, 0L);
      case 104:
        return jjMoveStringLiteralDfa3_0(
            active0, 0L, active1, 0L, active2, 0x4000000000L, active3, 0L, active4, 0L);
      case 105:
        return jjMoveStringLiteralDfa3_0(
            active0,
            0x200100002000000L,
            active1,
            0L,
            active2,
            0x10001000100L,
            active3,
            0L,
            active4,
            0L);
      case 107:
        return jjMoveStringLiteralDfa3_0(
            active0, 0L, active1, 0L, active2, 0L, active3, 0x100000000000000L, active4, 0L);
      case 108:
        if ((active1 & 0x1000000000000000L) != 0L) {
          jjmatchedKind = 124;
          jjmatchedPos = 2;
        }
        return jjMoveStringLiteralDfa3_0(
            active0,
            0x8000004018021000L,
            active1,
            0x400001000000L,
            active2,
            0x8000840000010L,
            active3,
            0L,
            active4,
            0x1000000L);
      case 109:
        return jjMoveStringLiteralDfa3_0(
            active0,
            0x880400000000L,
            active1,
            0x1080000000L,
            active2,
            0x8L,
            active3,
            0L,
            active4,
            0L);
      case 110:
        return jjMoveStringLiteralDfa3_0(
            active0,
            0x200000000L,
            active1,
            0x6010000002000800L,
            active2,
            0x800882L,
            active3,
            0xf800000000000000L,
            active4,
            0x1L);
      case 111:
        return jjMoveStringLiteralDfa3_0(
            active0,
            0x20000400000L,
            active1,
            0x60100180000L,
            active2,
            0x1200L,
            active3,
            0L,
            active4,
            0x4800000L);
      case 112:
        return jjMoveStringLiteralDfa3_0(
            active0, 0L, active1, 0xa000000000a010L, active2, 0x8000000L, active3, 0L, active4, 0L);
      case 113:
        return jjMoveStringLiteralDfa3_0(
            active0, 0L, active1, 0L, active2, 0x8000L, active3, 0L, active4, 0L);
      case 114:
        return jjMoveStringLiteralDfa3_0(
            active0,
            0x100040000L,
            active1,
            0x800008040000000cL,
            active2,
            0x20002400000L,
            active3,
            0L,
            active4,
            0L);
      case 115:
        return jjMoveStringLiteralDfa3_0(
            active0,
            0x4000000208000L,
            active1,
            0xa020000002L,
            active2,
            0x2000080040L,
            active3,
            0L,
            active4,
            0x8L);
      case 116:
        if ((active0 & 0x20000000L) != 0L) {
          jjmatchedKind = 29;
          jjmatchedPos = 2;
        } else if ((active0 & 0x80000000L) != 0L) {
          jjmatchedKind = 31;
          jjmatchedPos = 2;
        } else if ((active0 & 0x800000000000000L) != 0L) {
          jjmatchedKind = 59;
          jjmatchedPos = 2;
        } else if ((active3 & 0x40000000000000L) != 0L) {
          jjmatchedKind = 246;
          jjmatchedPos = 2;
        }
        return jjMoveStringLiteralDfa3_0(
            active0,
            0x458200004004000L,
            active1,
            0xc100048000100L,
            active2,
            0x10020000L,
            active3,
            0x400000000000000L,
            active4,
            0x2L);
      case 117:
        return jjMoveStringLiteralDfa3_0(
            active0,
            0L,
            active1,
            0x4010800000L,
            active2,
            0x4000000040000L,
            active3,
            0L,
            active4,
            0x1a040010L);
      case 118:
        return jjMoveStringLiteralDfa3_0(
            active0,
            0L,
            active1,
            0x240000000000000L,
            active2,
            0x4000000L,
            active3,
            0L,
            active4,
            0L);
      case 119:
        return jjMoveStringLiteralDfa3_0(
            active0, 0L, active1, 0x200L, active2, 0L, active3, 0L, active4, 0L);
      case 120:
        return jjMoveStringLiteralDfa3_0(
            active0, 0L, active1, 0x400L, active2, 0L, active3, 0L, active4, 0L);
      case 121:
        if ((active4 & 0x4L) != 0L) {
          jjmatchedKind = 258;
          jjmatchedPos = 2;
        }
        break;
      default:
        break;
    }
    return jjMoveNfa_0(3, 2);
  }

  private int jjMoveStringLiteralDfa3_0(
      long old0,
      long active0,
      long old1,
      long active1,
      long old2,
      long active2,
      long old3,
      long active3,
      long old4,
      long active4) {
    if (((active0 &= old0)
            | (active1 &= old1)
            | (active2 &= old2)
            | (active3 &= old3)
            | (active4 &= old4))
        == 0L) return jjMoveNfa_0(3, 2);
    try {
      curChar = input_stream.readChar();
    } catch (java.io.IOException e) {
      return jjMoveNfa_0(3, 2);
    }
    switch (curChar) {
      case 61:
        if ((active3 & 0x2000000000000L) != 0L) {
          jjmatchedKind = 241;
          jjmatchedPos = 3;
        }
        break;
      case 65:
        return jjMoveStringLiteralDfa4_0(
            active0,
            0x4000000000110000L,
            active1,
            0x800410000002002eL,
            active2,
            0x1000004000L,
            active3,
            0L,
            active4,
            0L);
      case 66:
        if ((active2 & 0x1000L) != 0L) {
          jjmatchedKind = 140;
          jjmatchedPos = 3;
        }
        break;
      case 67:
        if ((active0 & 0x4000000000000L) != 0L) {
          jjmatchedKind = 50;
          jjmatchedPos = 3;
        } else if ((active2 & 0x800000L) != 0L) {
          jjmatchedKind = 151;
          jjmatchedPos = 3;
        }
        return jjMoveStringLiteralDfa4_0(
            active0,
            0x8200000004000L,
            active1,
            0x4800088800000000L,
            active2,
            0L,
            active3,
            0L,
            active4,
            0x2L);
      case 68:
        if ((active1 & 0x2000000L) != 0L) {
          jjmatchedKind = 89;
          jjmatchedPos = 3;
        } else if ((active1 & 0x400000000000000L) != 0L) {
          jjmatchedKind = 122;
          jjmatchedPos = 3;
        } else if ((active2 & 0x10000000000L) != 0L) {
          jjmatchedKind = 168;
          jjmatchedPos = 3;
        }
        return jjMoveStringLiteralDfa4_0(
            active0, 0L, active1, 0xc00L, active2, 0L, active3, 0L, active4, 0L);
      case 69:
        if ((active0 & 0x80000L) != 0L) {
          jjmatchedKind = 19;
          jjmatchedPos = 3;
        } else if ((active1 & 0x80000000L) != 0L) {
          jjmatchedKind = 95;
          jjmatchedPos = 3;
        } else if ((active1 & 0x20000000000000L) != 0L) {
          jjmatchedKind = 117;
          jjmatchedPos = 3;
        } else if ((active1 & 0x2000000000000000L) != 0L) {
          jjmatchedKind = 125;
          jjmatchedPos = 3;
        } else if ((active2 & 0x40L) != 0L) {
          jjmatchedKind = 134;
          jjmatchedPos = 3;
        } else if ((active2 & 0x4000000L) != 0L) {
          jjmatchedKind = 154;
          jjmatchedPos = 3;
        } else if ((active2 & 0x40000000L) != 0L) {
          jjmatchedKind = 158;
          jjmatchedPos = 3;
        } else if ((active2 & 0x4000000000000L) != 0L) {
          jjmatchedKind = 178;
          jjmatchedPos = 3;
        } else if ((active3 & 0x100000000000000L) != 0L) {
          jjmatchedKind = 248;
          jjmatchedPos = 3;
        }
        return jjMoveStringLiteralDfa4_0(
            active0,
            0x40810000229000L,
            active1,
            0x4020004c04a040L,
            active2,
            0x2000400L,
            active3,
            0L,
            active4,
            0L);
      case 70:
        return jjMoveStringLiteralDfa4_0(
            active0, 0L, active1, 0x80000L, active2, 0L, active3, 0L, active4, 0L);
      case 71:
        return jjMoveStringLiteralDfa4_0(
            active0, 0x100000000L, active1, 0L, active2, 0x2L, active3, 0L, active4, 0L);
      case 72:
        return jjMoveStringLiteralDfa4_0(
            active0,
            0x1000000000000000L,
            active1,
            0x100L,
            active2,
            0x10000000L,
            active3,
            0L,
            active4,
            0L);
      case 73:
        return jjMoveStringLiteralDfa4_0(
            active0,
            0x8000088000000000L,
            active1,
            0x8800400000200L,
            active2,
            0x24800020004L,
            active3,
            0L,
            active4,
            0L);
      case 75:
        if ((active0 & 0x80000000000000L) != 0L) {
          jjmatchedKind = 55;
          jjmatchedPos = 3;
        } else if ((active1 & 0x10000000000000L) != 0L) {
          jjmatchedKind = 116;
          jjmatchedPos = 3;
        }
        break;
      case 76:
        if ((active0 & 0x4000000000L) != 0L) {
          jjmatchedKind = 38;
          jjmatchedPos = 3;
        } else if ((active2 & 0x100L) != 0L) {
          jjmatchedKind = 136;
          jjmatchedPos = 3;
        }
        return jjMoveStringLiteralDfa4_0(
            active0,
            0x2000000002000000L,
            active1,
            0x80400000000000L,
            active2,
            0x210L,
            active3,
            0L,
            active4,
            0L);
      case 77:
        if ((active0 & 0x400000L) != 0L) {
          jjmatchedKind = 22;
          jjmatchedPos = 3;
        }
        return jjMoveStringLiteralDfa4_0(
            active0, 0L, active1, 0L, active2, 0x9L, active3, 0L, active4, 0L);
      case 78:
        return jjMoveStringLiteralDfa4_0(
            active0,
            0L,
            active1,
            0x100000000800000L,
            active2,
            0x20040000L,
            active3,
            0L,
            active4,
            0L);
      case 79:
        if ((active0 & 0x4000000L) != 0L) {
          jjmatchedKind = 26;
          jjmatchedPos = 3;
        }
        return jjMoveStringLiteralDfa4_0(
            active0,
            0x120000400000000L,
            active1,
            0x200001000000000L,
            active2,
            0L,
            active3,
            0L,
            active4,
            0L);
      case 80:
        if ((active0 & 0x100000000000L) != 0L) {
          jjmatchedKind = 44;
          jjmatchedPos = 3;
        } else if ((active1 & 0x20000000000L) != 0L) {
          jjmatchedKind = 105;
          jjmatchedPos = 3;
        }
        return jjMoveStringLiteralDfa4_0(
            active0, 0L, active1, 0x40000000000L, active2, 0L, active3, 0L, active4, 0L);
      case 82:
        if ((active1 & 0x80L) != 0L) {
          jjmatchedKind = 71;
          jjmatchedPos = 3;
        } else if ((active2 & 0x80000000L) != 0L) {
          jjmatchedKind = 159;
          jjmatchedPos = 3;
        }
        return jjMoveStringLiteralDfa4_0(
            active0,
            0x400000801000000L,
            active1,
            0x10300100000L,
            active2,
            0x100012000L,
            active3,
            0L,
            active4,
            0L);
      case 83:
        return jjMoveStringLiteralDfa4_0(
            active0,
            0x400000000000L,
            active1,
            0x4010005000L,
            active2,
            0x8000001000800L,
            active3,
            0L,
            active4,
            0x10L);
      case 84:
        if ((active0 & 0x200000000000000L) != 0L) {
          jjmatchedKind = 57;
          jjmatchedPos = 3;
        }
        return jjMoveStringLiteralDfa4_0(
            active0,
            0x200040000L,
            active1,
            0x2020000010L,
            active2,
            0x2008280080L,
            active3,
            0xf800000000000000L,
            active4,
            0x9L);
      case 85:
        return jjMoveStringLiteralDfa4_0(
            active0,
            0x10020018000000L,
            active1,
            0x1000000000000L,
            active2,
            0x400008000L,
            active3,
            0L,
            active4,
            0L);
      case 86:
        return jjMoveStringLiteralDfa4_0(
            active0, 0x2000L, active1, 0L, active2, 0x400000L, active3, 0L, active4, 0L);
      case 87:
        if ((active1 & 0x10000L) != 0L) {
          jjmatchedKind = 80;
          jjmatchedPos = 3;
        }
        return jjMoveStringLiteralDfa4_0(
            active0, 0L, active1, 0L, active2, 0L, active3, 0x400000000000000L, active4, 0L);
      case 89:
        return jjMoveStringLiteralDfa4_0(
            active0, 0L, active1, 0x1000001L, active2, 0L, active3, 0L, active4, 0L);
      case 97:
        return jjMoveStringLiteralDfa4_0(
            active0,
            0x4000000000110000L,
            active1,
            0x800410000002002eL,
            active2,
            0x1000004000L,
            active3,
            0L,
            active4,
            0L);
      case 98:
        if ((active2 & 0x1000L) != 0L) {
          jjmatchedKind = 140;
          jjmatchedPos = 3;
        }
        break;
      case 99:
        if ((active0 & 0x4000000000000L) != 0L) {
          jjmatchedKind = 50;
          jjmatchedPos = 3;
        } else if ((active2 & 0x800000L) != 0L) {
          jjmatchedKind = 151;
          jjmatchedPos = 3;
        }
        return jjMoveStringLiteralDfa4_0(
            active0,
            0x8200000004000L,
            active1,
            0x4800088800000000L,
            active2,
            0L,
            active3,
            0L,
            active4,
            0x800002L);
      case 100:
        if ((active1 & 0x2000000L) != 0L) {
          jjmatchedKind = 89;
          jjmatchedPos = 3;
        } else if ((active1 & 0x400000000000000L) != 0L) {
          jjmatchedKind = 122;
          jjmatchedPos = 3;
        } else if ((active2 & 0x10000000000L) != 0L) {
          jjmatchedKind = 168;
          jjmatchedPos = 3;
        }
        return jjMoveStringLiteralDfa4_0(
            active0, 0L, active1, 0xc00L, active2, 0L, active3, 0L, active4, 0L);
      case 101:
        if ((active0 & 0x80000L) != 0L) {
          jjmatchedKind = 19;
          jjmatchedPos = 3;
        } else if ((active1 & 0x80000000L) != 0L) {
          jjmatchedKind = 95;
          jjmatchedPos = 3;
        } else if ((active1 & 0x20000000000000L) != 0L) {
          jjmatchedKind = 117;
          jjmatchedPos = 3;
        } else if ((active1 & 0x2000000000000000L) != 0L) {
          jjmatchedKind = 125;
          jjmatchedPos = 3;
        } else if ((active2 & 0x40L) != 0L) {
          jjmatchedKind = 134;
          jjmatchedPos = 3;
        } else if ((active2 & 0x4000000L) != 0L) {
          jjmatchedKind = 154;
          jjmatchedPos = 3;
        } else if ((active2 & 0x40000000L) != 0L) {
          jjmatchedKind = 158;
          jjmatchedPos = 3;
        } else if ((active2 & 0x4000000000000L) != 0L) {
          jjmatchedKind = 178;
          jjmatchedPos = 3;
        } else if ((active3 & 0x100000000000000L) != 0L) {
          jjmatchedKind = 248;
          jjmatchedPos = 3;
        }
        return jjMoveStringLiteralDfa4_0(
            active0,
            0x40810000229000L,
            active1,
            0x4020004c04a040L,
            active2,
            0x2000400L,
            active3,
            0L,
            active4,
            0L);
      case 102:
        return jjMoveStringLiteralDfa4_0(
            active0, 0L, active1, 0x80000L, active2, 0L, active3, 0L, active4, 0L);
      case 103:
        return jjMoveStringLiteralDfa4_0(
            active0, 0x100000000L, active1, 0L, active2, 0x2L, active3, 0L, active4, 0L);
      case 104:
        return jjMoveStringLiteralDfa4_0(
            active0,
            0x1000000000000000L,
            active1,
            0x100L,
            active2,
            0x10000000L,
            active3,
            0L,
            active4,
            0L);
      case 105:
        return jjMoveStringLiteralDfa4_0(
            active0,
            0x8000088000000000L,
            active1,
            0x8800400000200L,
            active2,
            0x24800020004L,
            active3,
            0L,
            active4,
            0L);
      case 107:
        if ((active0 & 0x80000000000000L) != 0L) {
          jjmatchedKind = 55;
          jjmatchedPos = 3;
        } else if ((active1 & 0x10000000000000L) != 0L) {
          jjmatchedKind = 116;
          jjmatchedPos = 3;
        }
        break;
      case 108:
        if ((active0 & 0x4000000000L) != 0L) {
          jjmatchedKind = 38;
          jjmatchedPos = 3;
        } else if ((active2 & 0x100L) != 0L) {
          jjmatchedKind = 136;
          jjmatchedPos = 3;
        } else if ((active4 & 0x1000000L) != 0L) {
          jjmatchedKind = 280;
          jjmatchedPos = 3;
        }
        return jjMoveStringLiteralDfa4_0(
            active0,
            0x2000000002000000L,
            active1,
            0x80400000000000L,
            active2,
            0x210L,
            active3,
            0L,
            active4,
            0x18000000L);
      case 109:
        if ((active0 & 0x400000L) != 0L) {
          jjmatchedKind = 22;
          jjmatchedPos = 3;
        }
        return jjMoveStringLiteralDfa4_0(
            active0, 0L, active1, 0L, active2, 0x9L, active3, 0L, active4, 0L);
      case 110:
        return jjMoveStringLiteralDfa4_0(
            active0,
            0L,
            active1,
            0x100000000800000L,
            active2,
            0x20040000L,
            active3,
            0L,
            active4,
            0x40000L);
      case 111:
        if ((active0 & 0x4000000L) != 0L) {
          jjmatchedKind = 26;
          jjmatchedPos = 3;
        }
        return jjMoveStringLiteralDfa4_0(
            active0,
            0x120000400000000L,
            active1,
            0x200001000000000L,
            active2,
            0L,
            active3,
            0L,
            active4,
            0L);
      case 112:
        if ((active0 & 0x100000000000L) != 0L) {
          jjmatchedKind = 44;
          jjmatchedPos = 3;
        } else if ((active1 & 0x20000000000L) != 0L) {
          jjmatchedKind = 105;
          jjmatchedPos = 3;
        }
        return jjMoveStringLiteralDfa4_0(
            active0, 0L, active1, 0x40000000000L, active2, 0L, active3, 0L, active4, 0L);
      case 114:
        if ((active1 & 0x80L) != 0L) {
          jjmatchedKind = 71;
          jjmatchedPos = 3;
        } else if ((active2 & 0x80000000L) != 0L) {
          jjmatchedKind = 159;
          jjmatchedPos = 3;
        }
        return jjMoveStringLiteralDfa4_0(
            active0,
            0x400000801000000L,
            active1,
            0x10300100000L,
            active2,
            0x100012000L,
            active3,
            0L,
            active4,
            0x240a0000L);
      case 115:
        return jjMoveStringLiteralDfa4_0(
            active0,
            0x400000000000L,
            active1,
            0x4010005000L,
            active2,
            0x8000001000800L,
            active3,
            0L,
            active4,
            0x400010L);
      case 116:
        if ((active0 & 0x200000000000000L) != 0L) {
          jjmatchedKind = 57;
          jjmatchedPos = 3;
        }
        return jjMoveStringLiteralDfa4_0(
            active0,
            0x200040000L,
            active1,
            0x2020000010L,
            active2,
            0x2008280080L,
            active3,
            0xf800000000000000L,
            active4,
            0x2200009L);
      case 117:
        return jjMoveStringLiteralDfa4_0(
            active0,
            0x10020018000000L,
            active1,
            0x1000000000000L,
            active2,
            0x400008000L,
            active3,
            0L,
            active4,
            0L);
      case 118:
        return jjMoveStringLiteralDfa4_0(
            active0, 0x2000L, active1, 0L, active2, 0x400000L, active3, 0L, active4, 0L);
      case 119:
        if ((active1 & 0x10000L) != 0L) {
          jjmatchedKind = 80;
          jjmatchedPos = 3;
        }
        return jjMoveStringLiteralDfa4_0(
            active0, 0L, active1, 0L, active2, 0L, active3, 0x400000000000000L, active4, 0L);
      case 121:
        return jjMoveStringLiteralDfa4_0(
            active0, 0L, active1, 0x1000001L, active2, 0L, active3, 0L, active4, 0L);
      default:
        break;
    }
    return jjMoveNfa_0(3, 3);
  }

  private int jjMoveStringLiteralDfa4_0(
      long old0,
      long active0,
      long old1,
      long active1,
      long old2,
      long active2,
      long old3,
      long active3,
      long old4,
      long active4) {
    if (((active0 &= old0)
            | (active1 &= old1)
            | (active2 &= old2)
            | (active3 &= old3)
            | (active4 &= old4))
        == 0L) return jjMoveNfa_0(3, 3);
    try {
      curChar = input_stream.readChar();
    } catch (java.io.IOException e) {
      return jjMoveNfa_0(3, 3);
    }
    switch (curChar) {
      case 65:
        return jjMoveStringLiteralDfa5_0(
            active0,
            0L,
            active1,
            0x80400000100000L,
            active2,
            0x12000200L,
            active3,
            0xf800000000000000L,
            active4,
            0x9L);
      case 66:
        return jjMoveStringLiteralDfa5_0(
            active0, 0L, active1, 0x4000000000000L, active2, 0x10L, active3, 0L, active4, 0L);
      case 67:
        return jjMoveStringLiteralDfa5_0(
            active0,
            0x4000000000001000L,
            active1,
            0x400800001L,
            active2,
            0x800000000L,
            active3,
            0L,
            active4,
            0L);
      case 68:
        return jjMoveStringLiteralDfa5_0(
            active0,
            0L,
            active1,
            0x100000000020L,
            active2,
            0x20000000000L,
            active3,
            0L,
            active4,
            0L);
      case 69:
        if ((active0 & 0x1000000L) != 0L) {
          jjmatchedKind = 24;
          jjmatchedPos = 4;
        } else if ((active0 & 0x2000000L) != 0L) {
          jjmatchedKind = 25;
          jjmatchedPos = 4;
        } else if ((active0 & 0x8000000L) != 0L) {
          jjmatchedKind = 27;
          jjmatchedPos = 4;
        } else if ((active0 & 0x100000000L) != 0L) {
          jjmatchedKind = 32;
          jjmatchedPos = 4;
        } else if ((active0 & 0x1000000000000000L) != 0L) {
          jjmatchedKind = 60;
          jjmatchedPos = 4;
        } else if ((active0 & 0x2000000000000000L) != 0L) {
          jjmatchedKind = 61;
          jjmatchedPos = 4;
        } else if ((active1 & 0x80000000000L) != 0L) {
          jjmatchedKind = 107;
          jjmatchedPos = 4;
        } else if ((active2 & 0x8000000000000L) != 0L) {
          jjmatchedKind = 179;
          jjmatchedPos = 4;
        }
        return jjMoveStringLiteralDfa5_0(
            active0,
            0x400a10042000L,
            active1,
            0x40000000c00L,
            active2,
            0x200040a000L,
            active3,
            0x400000000000000L,
            active4,
            0L);
      case 70:
        return jjMoveStringLiteralDfa5_0(
            active0, 0L, active1, 0x2L, active2, 0L, active3, 0L, active4, 0L);
      case 72:
        if ((active0 & 0x4000L) != 0L) {
          jjmatchedKind = 14;
          jjmatchedPos = 4;
        } else if ((active0 & 0x200000000000L) != 0L) {
          jjmatchedKind = 45;
          jjmatchedPos = 4;
        }
        return jjMoveStringLiteralDfa5_0(
            active0,
            0x8000000000000L,
            active1,
            0x10L,
            active2,
            0x8000000L,
            active3,
            0L,
            active4,
            0x2L);
      case 73:
        return jjMoveStringLiteralDfa5_0(
            active0, 0L, active1, 0x1000000080100L, active2, 0x80088L, active3, 0L, active4, 0L);
      case 75:
        return jjMoveStringLiteralDfa5_0(
            active0, 0L, active1, 0x200000000000000L, active2, 0L, active3, 0L, active4, 0L);
      case 76:
        return jjMoveStringLiteralDfa5_0(
            active0, 0L, active1, 0x800000004L, active2, 0L, active3, 0L, active4, 0L);
      case 77:
        return jjMoveStringLiteralDfa5_0(
            active0,
            0x8000000000000000L,
            active1,
            0x8008000001000000L,
            active2,
            0L,
            active3,
            0L,
            active4,
            0L);
      case 78:
        if ((active2 & 0x4L) != 0L) {
          jjmatchedKind = 130;
          jjmatchedPos = 4;
        }
        return jjMoveStringLiteralDfa5_0(
            active0,
            0x8000000000L,
            active1,
            0x800008000240L,
            active2,
            0L,
            active3,
            0L,
            active4,
            0L);
      case 79:
        return jjMoveStringLiteralDfa5_0(
            active0,
            0x800000000000L,
            active1,
            0x2000000000L,
            active2,
            0x20800L,
            active3,
            0L,
            active4,
            0L);
      case 80:
        if ((active0 & 0x20000000000L) != 0L) {
          jjmatchedKind = 41;
          jjmatchedPos = 4;
        } else if ((active2 & 0x400L) != 0L) {
          jjmatchedKind = 138;
          jjmatchedPos = 4;
        }
        return jjMoveStringLiteralDfa5_0(
            active0, 0L, active1, 0x40000L, active2, 0x1L, active3, 0L, active4, 0L);
      case 82:
        if ((active0 & 0x10000000000L) != 0L) {
          jjmatchedKind = 40;
          jjmatchedPos = 4;
        } else if ((active0 & 0x40000000000000L) != 0L) {
          jjmatchedKind = 54;
          jjmatchedPos = 4;
        } else if ((active1 & 0x40000000L) != 0L) {
          jjmatchedKind = 94;
          jjmatchedPos = 4;
        }
        return jjMoveStringLiteralDfa5_0(
            active0,
            0x130000000208000L,
            active1,
            0x4000802400a000L,
            active2,
            0x400000000L,
            active3,
            0L,
            active4,
            0L);
      case 83:
        if ((active1 & 0x1000L) != 0L) {
          jjmatchedKind = 76;
          jjmatchedPos = 4;
        } else if ((active2 & 0x100000000L) != 0L) {
          jjmatchedKind = 160;
          jjmatchedPos = 4;
        } else if ((active2 & 0x4000000000L) != 0L) {
          jjmatchedKind = 166;
          jjmatchedPos = 4;
        }
        return jjMoveStringLiteralDfa5_0(
            active0, 0L, active1, 0x200004000L, active2, 0L, active3, 0L, active4, 0L);
      case 84:
        if ((active0 & 0x80000000000L) != 0L) {
          jjmatchedKind = 43;
          jjmatchedPos = 4;
        } else if ((active1 & 0x100000000000000L) != 0L) {
          jjmatchedKind = 120;
          jjmatchedPos = 4;
        } else if ((active2 & 0x10000L) != 0L) {
          jjmatchedKind = 144;
          jjmatchedPos = 4;
        } else if ((active2 & 0x40000L) != 0L) {
          jjmatchedKind = 146;
          jjmatchedPos = 4;
        }
        return jjMoveStringLiteralDfa5_0(
            active0,
            0x130000L,
            active1,
            0x4000004110020008L,
            active2,
            0x21000000L,
            active3,
            0L,
            active4,
            0x10L);
      case 85:
        return jjMoveStringLiteralDfa5_0(
            active0,
            0L,
            active1,
            0x800000000000000L,
            active2,
            0x1000204002L,
            active3,
            0L,
            active4,
            0L);
      case 86:
        return jjMoveStringLiteralDfa5_0(
            active0, 0x400000000L, active1, 0x1000000000L, active2, 0L, active3, 0L, active4, 0L);
      case 88:
        if ((active1 & 0x200000000000L) != 0L) {
          jjmatchedKind = 109;
          jjmatchedPos = 4;
        }
        break;
      case 89:
        if ((active0 & 0x400000000000000L) != 0L) {
          jjmatchedKind = 58;
          jjmatchedPos = 4;
        }
        return jjMoveStringLiteralDfa5_0(
            active0, 0L, active1, 0x10000000000L, active2, 0L, active3, 0L, active4, 0L);
      case 97:
        return jjMoveStringLiteralDfa5_0(
            active0,
            0L,
            active1,
            0x80400000100000L,
            active2,
            0x12000200L,
            active3,
            0xf800000000000000L,
            active4,
            0x9L);
      case 98:
        return jjMoveStringLiteralDfa5_0(
            active0, 0L, active1, 0x4000000000000L, active2, 0x10L, active3, 0L, active4, 0L);
      case 99:
        return jjMoveStringLiteralDfa5_0(
            active0,
            0x4000000000001000L,
            active1,
            0x400800001L,
            active2,
            0x800000000L,
            active3,
            0L,
            active4,
            0x4000000L);
      case 100:
        return jjMoveStringLiteralDfa5_0(
            active0,
            0L,
            active1,
            0x100000000020L,
            active2,
            0x20000000000L,
            active3,
            0L,
            active4,
            0x40000L);
      case 101:
        if ((active0 & 0x1000000L) != 0L) {
          jjmatchedKind = 24;
          jjmatchedPos = 4;
        } else if ((active0 & 0x2000000L) != 0L) {
          jjmatchedKind = 25;
          jjmatchedPos = 4;
        } else if ((active0 & 0x8000000L) != 0L) {
          jjmatchedKind = 27;
          jjmatchedPos = 4;
        } else if ((active0 & 0x100000000L) != 0L) {
          jjmatchedKind = 32;
          jjmatchedPos = 4;
        } else if ((active0 & 0x1000000000000000L) != 0L) {
          jjmatchedKind = 60;
          jjmatchedPos = 4;
        } else if ((active0 & 0x2000000000000000L) != 0L) {
          jjmatchedKind = 61;
          jjmatchedPos = 4;
        } else if ((active1 & 0x80000000000L) != 0L) {
          jjmatchedKind = 107;
          jjmatchedPos = 4;
        } else if ((active2 & 0x8000000000000L) != 0L) {
          jjmatchedKind = 179;
          jjmatchedPos = 4;
        }
        return jjMoveStringLiteralDfa5_0(
            active0,
            0x400a10042000L,
            active1,
            0x40000000c00L,
            active2,
            0x200040a000L,
            active3,
            0x400000000000000L,
            active4,
            0x220000L);
      case 102:
        return jjMoveStringLiteralDfa5_0(
            active0, 0L, active1, 0x2L, active2, 0L, active3, 0L, active4, 0L);
      case 103:
        return jjMoveStringLiteralDfa5_0(
            active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x20000000L);
      case 104:
        if ((active0 & 0x4000L) != 0L) {
          jjmatchedKind = 14;
          jjmatchedPos = 4;
        } else if ((active0 & 0x200000000000L) != 0L) {
          jjmatchedKind = 45;
          jjmatchedPos = 4;
        }
        return jjMoveStringLiteralDfa5_0(
            active0,
            0x8000000000000L,
            active1,
            0x10L,
            active2,
            0x8000000L,
            active3,
            0L,
            active4,
            0x2L);
      case 105:
        return jjMoveStringLiteralDfa5_0(
            active0, 0L, active1, 0x1000000080100L, active2, 0x80088L, active3, 0L, active4, 0L);
      case 107:
        return jjMoveStringLiteralDfa5_0(
            active0, 0L, active1, 0x200000000000000L, active2, 0L, active3, 0L, active4, 0x800000L);
      case 108:
        if ((active4 & 0x8000000L) != 0L) {
          jjmatchedKind = 283;
          jjmatchedPos = 4;
        }
        return jjMoveStringLiteralDfa5_0(
            active0, 0L, active1, 0x800000004L, active2, 0L, active3, 0L, active4, 0x10000000L);
      case 109:
        return jjMoveStringLiteralDfa5_0(
            active0,
            0x8000000000000000L,
            active1,
            0x8008000001000000L,
            active2,
            0L,
            active3,
            0L,
            active4,
            0L);
      case 110:
        if ((active2 & 0x4L) != 0L) {
          jjmatchedKind = 130;
          jjmatchedPos = 4;
        }
        return jjMoveStringLiteralDfa5_0(
            active0,
            0x8000000000L,
            active1,
            0x800008000240L,
            active2,
            0L,
            active3,
            0L,
            active4,
            0L);
      case 111:
        return jjMoveStringLiteralDfa5_0(
            active0,
            0x800000000000L,
            active1,
            0x2000000000L,
            active2,
            0x20800L,
            active3,
            0L,
            active4,
            0L);
      case 112:
        if ((active0 & 0x20000000000L) != 0L) {
          jjmatchedKind = 41;
          jjmatchedPos = 4;
        } else if ((active2 & 0x400L) != 0L) {
          jjmatchedKind = 138;
          jjmatchedPos = 4;
        }
        return jjMoveStringLiteralDfa5_0(
            active0, 0L, active1, 0x40000L, active2, 0x1L, active3, 0L, active4, 0x2000000L);
      case 114:
        if ((active0 & 0x10000000000L) != 0L) {
          jjmatchedKind = 40;
          jjmatchedPos = 4;
        } else if ((active0 & 0x40000000000000L) != 0L) {
          jjmatchedKind = 54;
          jjmatchedPos = 4;
        } else if ((active1 & 0x40000000L) != 0L) {
          jjmatchedKind = 94;
          jjmatchedPos = 4;
        }
        return jjMoveStringLiteralDfa5_0(
            active0,
            0x130000000208000L,
            active1,
            0x4000802400a000L,
            active2,
            0x400000000L,
            active3,
            0L,
            active4,
            0L);
      case 115:
        if ((active1 & 0x1000L) != 0L) {
          jjmatchedKind = 76;
          jjmatchedPos = 4;
        } else if ((active2 & 0x100000000L) != 0L) {
          jjmatchedKind = 160;
          jjmatchedPos = 4;
        } else if ((active2 & 0x4000000000L) != 0L) {
          jjmatchedKind = 166;
          jjmatchedPos = 4;
        }
        return jjMoveStringLiteralDfa5_0(
            active0, 0L, active1, 0x200004000L, active2, 0L, active3, 0L, active4, 0x400000L);
      case 116:
        if ((active0 & 0x80000000000L) != 0L) {
          jjmatchedKind = 43;
          jjmatchedPos = 4;
        } else if ((active1 & 0x100000000000000L) != 0L) {
          jjmatchedKind = 120;
          jjmatchedPos = 4;
        } else if ((active2 & 0x10000L) != 0L) {
          jjmatchedKind = 144;
          jjmatchedPos = 4;
        } else if ((active2 & 0x40000L) != 0L) {
          jjmatchedKind = 146;
          jjmatchedPos = 4;
        }
        return jjMoveStringLiteralDfa5_0(
            active0,
            0x130000L,
            active1,
            0x4000004110020008L,
            active2,
            0x21000000L,
            active3,
            0L,
            active4,
            0x10L);
      case 117:
        return jjMoveStringLiteralDfa5_0(
            active0,
            0L,
            active1,
            0x800000000000000L,
            active2,
            0x1000204002L,
            active3,
            0L,
            active4,
            0L);
      case 118:
        return jjMoveStringLiteralDfa5_0(
            active0,
            0x400000000L,
            active1,
            0x1000000000L,
            active2,
            0L,
            active3,
            0L,
            active4,
            0x80000L);
      case 120:
        if ((active1 & 0x200000000000L) != 0L) {
          jjmatchedKind = 109;
          jjmatchedPos = 4;
        }
        break;
      case 121:
        if ((active0 & 0x400000000000000L) != 0L) {
          jjmatchedKind = 58;
          jjmatchedPos = 4;
        }
        return jjMoveStringLiteralDfa5_0(
            active0, 0L, active1, 0x10000000000L, active2, 0L, active3, 0L, active4, 0L);
      default:
        break;
    }
    return jjMoveNfa_0(3, 4);
  }

  private int jjMoveStringLiteralDfa5_0(
      long old0,
      long active0,
      long old1,
      long active1,
      long old2,
      long active2,
      long old3,
      long active3,
      long old4,
      long active4) {
    if (((active0 &= old0)
            | (active1 &= old1)
            | (active2 &= old2)
            | (active3 &= old3)
            | (active4 &= old4))
        == 0L) return jjMoveNfa_0(3, 4);
    try {
      curChar = input_stream.readChar();
    } catch (java.io.IOException e) {
      return jjMoveNfa_0(3, 4);
    }
    switch (curChar) {
      case 34:
        if ((active2 & 0x20000000000L) != 0L) {
          jjmatchedKind = 169;
          jjmatchedPos = 5;
        }
        break;
      case 45:
        return jjMoveStringLiteralDfa6_0(
            active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x40000L);
      case 65:
        return jjMoveStringLiteralDfa6_0(
            active0, 0L, active1, 0x4100020820000L, active2, 0x8000012L, active3, 0L, active4, 0L);
      case 67:
        return jjMoveStringLiteralDfa6_0(
            active0, 0L, active1, 0xa000L, active2, 0x2000000L, active3, 0L, active4, 0L);
      case 68:
        if ((active0 & 0x100000000000000L) != 0L) {
          jjmatchedKind = 56;
          jjmatchedPos = 5;
        } else if ((active1 & 0x200L) != 0L) {
          jjmatchedKind = 73;
          jjmatchedPos = 5;
        } else if ((active2 & 0x2000L) != 0L) {
          jjmatchedKind = 141;
          jjmatchedPos = 5;
        }
        return jjMoveStringLiteralDfa6_0(
            active0, 0L, active1, 0x8000000L, active2, 0L, active3, 0L, active4, 0L);
      case 69:
        if ((active0 & 0x10000L) != 0L) {
          jjmatchedKind = 16;
          jjmatchedPos = 5;
        } else if ((active0 & 0x20000L) != 0L) {
          jjmatchedKind = 17;
          jjmatchedPos = 5;
        } else if ((active0 & 0x100000L) != 0L) {
          jjmatchedKind = 20;
          jjmatchedPos = 5;
        } else if ((active0 & 0x400000000L) != 0L) {
          jjmatchedKind = 34;
          jjmatchedPos = 5;
        } else if ((active0 & 0x20000000000000L) != 0L) {
          jjmatchedKind = 53;
          jjmatchedPos = 5;
        } else if ((active1 & 0x2L) != 0L) {
          jjmatchedKind = 65;
          jjmatchedPos = 5;
        } else if ((active1 & 0x40L) != 0L) {
          jjmatchedKind = 70;
          jjmatchedPos = 5;
        } else if ((active1 & 0x800000000000L) != 0L) {
          jjmatchedKind = 111;
          jjmatchedPos = 5;
        } else if ((active1 & 0x200000000000000L) != 0L) {
          jjmatchedKind = 121;
          jjmatchedPos = 5;
        }
        return jjMoveStringLiteralDfa6_0(
            active0,
            0x8000000000L,
            active1,
            0x8000005014004008L,
            active2,
            0L,
            active3,
            0x400000000000000L,
            active4,
            0x12L);
      case 71:
        return jjMoveStringLiteralDfa6_0(
            active0, 0L, active1, 0x100000L, active2, 0L, active3, 0L, active4, 0L);
      case 72:
        return jjMoveStringLiteralDfa6_0(
            active0, 0x4000000000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L);
      case 73:
        return jjMoveStringLiteralDfa6_0(
            active0,
            0x8000000000000000L,
            active1,
            0x4088008200000000L,
            active2,
            0x420000000L,
            active3,
            0xf800000000000000L,
            active4,
            0x1L);
      case 76:
        return jjMoveStringLiteralDfa6_0(
            active0,
            0L,
            active1,
            0x1000000080005L,
            active2,
            0x1010004800L,
            active3,
            0L,
            active4,
            0L);
      case 77:
        if ((active1 & 0x2000000000L) != 0L) {
          jjmatchedKind = 101;
          jjmatchedPos = 5;
        } else if ((active2 & 0x2000000000L) != 0L) {
          jjmatchedKind = 165;
          jjmatchedPos = 5;
        }
        return jjMoveStringLiteralDfa6_0(
            active0, 0x800000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L);
      case 78:
        if ((active0 & 0x10000000000000L) != 0L) {
          jjmatchedKind = 52;
          jjmatchedPos = 5;
        } else if ((active1 & 0x100L) != 0L) {
          jjmatchedKind = 72;
          jjmatchedPos = 5;
        }
        return jjMoveStringLiteralDfa6_0(
            active0,
            0x200000000L,
            active1,
            0x100000000L,
            active2,
            0xa8080L,
            active3,
            0L,
            active4,
            0x8L);
      case 79:
        return jjMoveStringLiteralDfa6_0(
            active0, 0L, active1, 0x1000000L, active2, 0x1L, active3, 0L, active4, 0L);
      case 80:
        return jjMoveStringLiteralDfa6_0(
            active0,
            0x8000000000000L,
            active1,
            0x10000000c00L,
            active2,
            0L,
            active3,
            0L,
            active4,
            0L);
      case 82:
        if ((active2 & 0x400000L) != 0L) {
          jjmatchedKind = 150;
          jjmatchedPos = 5;
        }
        return jjMoveStringLiteralDfa6_0(
            active0, 0x2000L, active1, 0x40000000000L, active2, 0L, active3, 0L, active4, 0L);
      case 83:
        if ((active0 & 0x10000000L) != 0L) {
          jjmatchedKind = 28;
          jjmatchedPos = 5;
        } else if ((active2 & 0x200000L) != 0L) {
          jjmatchedKind = 149;
          jjmatchedPos = 5;
        } else if ((active2 & 0x1000000L) != 0L) {
          jjmatchedKind = 152;
          jjmatchedPos = 5;
        }
        return jjMoveStringLiteralDfa6_0(
            active0, 0L, active1, 0x40000000000000L, active2, 0L, active3, 0L, active4, 0L);
      case 84:
        if ((active0 & 0x1000L) != 0L) {
          jjmatchedKind = 12;
          jjmatchedPos = 5;
        } else if ((active0 & 0x8000L) != 0L) {
          jjmatchedKind = 15;
          jjmatchedPos = 5;
        } else if ((active0 & 0x200000L) != 0L) {
          jjmatchedKind = 21;
          jjmatchedPos = 5;
        } else if ((active0 & 0x400000000000L) != 0L) {
          jjmatchedKind = 46;
          jjmatchedPos = 5;
        } else if ((active2 & 0x8L) != 0L) {
          jjmatchedKind = 131;
          jjmatchedPos = 5;
        }
        return jjMoveStringLiteralDfa6_0(
            active0, 0L, active1, 0x800400400040020L, active2, 0x200L, active3, 0L, active4, 0L);
      case 85:
        return jjMoveStringLiteralDfa6_0(
            active0, 0x800000000000L, active1, 0x800000000L, active2, 0L, active3, 0L, active4, 0L);
      case 88:
        if ((active0 & 0x40000L) != 0L) {
          jjmatchedKind = 18;
          jjmatchedPos = 5;
        }
        break;
      case 89:
        if ((active2 & 0x800000000L) != 0L) {
          jjmatchedKind = 163;
          jjmatchedPos = 5;
        }
        break;
      case 95:
        return jjMoveStringLiteralDfa6_0(
            active0, 0L, active1, 0x10L, active2, 0L, active3, 0L, active4, 0x10000000L);
      case 97:
        return jjMoveStringLiteralDfa6_0(
            active0,
            0L,
            active1,
            0x4100020820000L,
            active2,
            0x8000012L,
            active3,
            0L,
            active4,
            0x400000L);
      case 99:
        return jjMoveStringLiteralDfa6_0(
            active0, 0L, active1, 0xa000L, active2, 0x2000000L, active3, 0L, active4, 0x20000L);
      case 100:
        if ((active0 & 0x100000000000000L) != 0L) {
          jjmatchedKind = 56;
          jjmatchedPos = 5;
        } else if ((active1 & 0x200L) != 0L) {
          jjmatchedKind = 73;
          jjmatchedPos = 5;
        } else if ((active2 & 0x2000L) != 0L) {
          jjmatchedKind = 141;
          jjmatchedPos = 5;
        }
        return jjMoveStringLiteralDfa6_0(
            active0, 0L, active1, 0x8000000L, active2, 0L, active3, 0L, active4, 0L);
      case 101:
        if ((active0 & 0x10000L) != 0L) {
          jjmatchedKind = 16;
          jjmatchedPos = 5;
        } else if ((active0 & 0x20000L) != 0L) {
          jjmatchedKind = 17;
          jjmatchedPos = 5;
        } else if ((active0 & 0x100000L) != 0L) {
          jjmatchedKind = 20;
          jjmatchedPos = 5;
        } else if ((active0 & 0x400000000L) != 0L) {
          jjmatchedKind = 34;
          jjmatchedPos = 5;
        } else if ((active0 & 0x20000000000000L) != 0L) {
          jjmatchedKind = 53;
          jjmatchedPos = 5;
        } else if ((active1 & 0x2L) != 0L) {
          jjmatchedKind = 65;
          jjmatchedPos = 5;
        } else if ((active1 & 0x40L) != 0L) {
          jjmatchedKind = 70;
          jjmatchedPos = 5;
        } else if ((active1 & 0x800000000000L) != 0L) {
          jjmatchedKind = 111;
          jjmatchedPos = 5;
        } else if ((active1 & 0x200000000000000L) != 0L) {
          jjmatchedKind = 121;
          jjmatchedPos = 5;
        } else if ((active4 & 0x4000000L) != 0L) {
          jjmatchedKind = 282;
          jjmatchedPos = 5;
        } else if ((active4 & 0x20000000L) != 0L) {
          jjmatchedKind = 285;
          jjmatchedPos = 5;
        }
        return jjMoveStringLiteralDfa6_0(
            active0,
            0x8000000000L,
            active1,
            0x8000005014004008L,
            active2,
            0L,
            active3,
            0x400000000000000L,
            active4,
            0x80012L);
      case 103:
        return jjMoveStringLiteralDfa6_0(
            active0, 0L, active1, 0x100000L, active2, 0L, active3, 0L, active4, 0L);
      case 104:
        return jjMoveStringLiteralDfa6_0(
            active0, 0x4000000000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L);
      case 105:
        return jjMoveStringLiteralDfa6_0(
            active0,
            0x8000000000000000L,
            active1,
            0x4088008200000000L,
            active2,
            0x420000000L,
            active3,
            0xf800000000000000L,
            active4,
            0x1L);
      case 108:
        return jjMoveStringLiteralDfa6_0(
            active0,
            0L,
            active1,
            0x1000000080005L,
            active2,
            0x1010004800L,
            active3,
            0L,
            active4,
            0L);
      case 109:
        if ((active1 & 0x2000000000L) != 0L) {
          jjmatchedKind = 101;
          jjmatchedPos = 5;
        } else if ((active2 & 0x2000000000L) != 0L) {
          jjmatchedKind = 165;
          jjmatchedPos = 5;
        }
        return jjMoveStringLiteralDfa6_0(
            active0, 0x800000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L);
      case 110:
        if ((active0 & 0x10000000000000L) != 0L) {
          jjmatchedKind = 52;
          jjmatchedPos = 5;
        } else if ((active1 & 0x100L) != 0L) {
          jjmatchedKind = 72;
          jjmatchedPos = 5;
        }
        return jjMoveStringLiteralDfa6_0(
            active0,
            0x200000000L,
            active1,
            0x100000000L,
            active2,
            0xa8080L,
            active3,
            0L,
            active4,
            0x200008L);
      case 111:
        return jjMoveStringLiteralDfa6_0(
            active0, 0L, active1, 0x1000000L, active2, 0x1L, active3, 0L, active4, 0L);
      case 112:
        return jjMoveStringLiteralDfa6_0(
            active0,
            0x8000000000000L,
            active1,
            0x10000000c00L,
            active2,
            0L,
            active3,
            0L,
            active4,
            0L);
      case 114:
        if ((active2 & 0x400000L) != 0L) {
          jjmatchedKind = 150;
          jjmatchedPos = 5;
        }
        return jjMoveStringLiteralDfa6_0(
            active0, 0x2000L, active1, 0x40000000000L, active2, 0L, active3, 0L, active4, 0L);
      case 115:
        if ((active0 & 0x10000000L) != 0L) {
          jjmatchedKind = 28;
          jjmatchedPos = 5;
        } else if ((active2 & 0x200000L) != 0L) {
          jjmatchedKind = 149;
          jjmatchedPos = 5;
        } else if ((active2 & 0x1000000L) != 0L) {
          jjmatchedKind = 152;
          jjmatchedPos = 5;
        } else if ((active4 & 0x800000L) != 0L) {
          jjmatchedKind = 279;
          jjmatchedPos = 5;
        }
        return jjMoveStringLiteralDfa6_0(
            active0, 0L, active1, 0x40000000000000L, active2, 0L, active3, 0L, active4, 0L);
      case 116:
        if ((active0 & 0x1000L) != 0L) {
          jjmatchedKind = 12;
          jjmatchedPos = 5;
        } else if ((active0 & 0x8000L) != 0L) {
          jjmatchedKind = 15;
          jjmatchedPos = 5;
        } else if ((active0 & 0x200000L) != 0L) {
          jjmatchedKind = 21;
          jjmatchedPos = 5;
        } else if ((active0 & 0x400000000000L) != 0L) {
          jjmatchedKind = 46;
          jjmatchedPos = 5;
        } else if ((active2 & 0x8L) != 0L) {
          jjmatchedKind = 131;
          jjmatchedPos = 5;
        }
        return jjMoveStringLiteralDfa6_0(
            active0, 0L, active1, 0x800400400040020L, active2, 0x200L, active3, 0L, active4, 0L);
      case 117:
        return jjMoveStringLiteralDfa6_0(
            active0,
            0x800000000000L,
            active1,
            0x800000000L,
            active2,
            0L,
            active3,
            0L,
            active4,
            0x2000000L);
      case 120:
        if ((active0 & 0x40000L) != 0L) {
          jjmatchedKind = 18;
          jjmatchedPos = 5;
        }
        break;
      case 121:
        if ((active2 & 0x800000000L) != 0L) {
          jjmatchedKind = 163;
          jjmatchedPos = 5;
        }
        break;
      default:
        break;
    }
    return jjMoveNfa_0(3, 5);
  }

  private int jjMoveStringLiteralDfa6_0(
      long old0,
      long active0,
      long old1,
      long active1,
      long old2,
      long active2,
      long old3,
      long active3,
      long old4,
      long active4) {
    if (((active0 &= old0)
            | (active1 &= old1)
            | (active2 &= old2)
            | (active3 &= old3)
            | (active4 &= old4))
        == 0L) return jjMoveNfa_0(3, 5);
    try {
      curChar = input_stream.readChar();
    } catch (java.io.IOException e) {
      return jjMoveNfa_0(3, 5);
    }
    switch (curChar) {
      case 65:
        return jjMoveStringLiteralDfa7_0(
            active0, 0L, active1, 0x100000000L, active2, 0x20000L, active3, 0L, active4, 0L);
      case 66:
        return jjMoveStringLiteralDfa7_0(
            active0, 0L, active1, 0x20000L, active2, 0L, active3, 0L, active4, 0L);
      case 67:
        return jjMoveStringLiteralDfa7_0(
            active0, 0L, active1, 0x1020000000L, active2, 0x88010L, active3, 0L, active4, 0x8L);
      case 68:
        if ((active0 & 0x8000000000L) != 0L) {
          jjmatchedKind = 39;
          jjmatchedPos = 6;
        } else if ((active1 & 0x1000000000000L) != 0L) {
          jjmatchedKind = 112;
          jjmatchedPos = 6;
        }
        break;
      case 69:
        if ((active0 & 0x4000000000000000L) != 0L) {
          jjmatchedKind = 62;
          jjmatchedPos = 6;
        } else if ((active1 & 0x1L) != 0L) {
          jjmatchedKind = 64;
          jjmatchedPos = 6;
        } else if ((active1 & 0x80000L) != 0L) {
          jjmatchedKind = 83;
          jjmatchedPos = 6;
        } else if ((active1 & 0x100000L) != 0L) {
          jjmatchedKind = 84;
          jjmatchedPos = 6;
        } else if ((active1 & 0x400000000000L) != 0L) {
          jjmatchedKind = 110;
          jjmatchedPos = 6;
        } else if ((active1 & 0x40000000000000L) != 0L) {
          jjmatchedKind = 118;
          jjmatchedPos = 6;
        } else if ((active1 & 0x800000000000000L) != 0L) {
          jjmatchedKind = 123;
          jjmatchedPos = 6;
        } else if ((active2 & 0x800L) != 0L) {
          jjmatchedKind = 139;
          jjmatchedPos = 6;
        }
        return jjMoveStringLiteralDfa7_0(
            active0, 0x800000000L, active1, 0x4L, active2, 0L, active3, 0L, active4, 0L);
      case 70:
        return jjMoveStringLiteralDfa7_0(
            active0, 0L, active1, 0x10L, active2, 0x20000000L, active3, 0L, active4, 0L);
      case 71:
        return jjMoveStringLiteralDfa7_0(
            active0, 0L, active1, 0x8L, active2, 0x2L, active3, 0L, active4, 0L);
      case 72:
        if ((active2 & 0x2000000L) != 0L) {
          jjmatchedKind = 153;
          jjmatchedPos = 6;
        }
        return jjMoveStringLiteralDfa7_0(
            active0, 0L, active1, 0x20L, active2, 0L, active3, 0L, active4, 0L);
      case 73:
        return jjMoveStringLiteralDfa7_0(
            active0, 0L, active1, 0x40000L, active2, 0x10000200L, active3, 0L, active4, 0L);
      case 76:
        return jjMoveStringLiteralDfa7_0(
            active0,
            0x8000000000000L,
            active1,
            0xa000L,
            active2,
            0x8000000L,
            active3,
            0L,
            active4,
            0L);
      case 77:
        return jjMoveStringLiteralDfa7_0(
            active0, 0L, active1, 0x400000000L, active2, 0L, active3, 0L, active4, 0L);
      case 78:
        if ((active1 & 0x80000000000000L) != 0L) {
          jjmatchedKind = 119;
          jjmatchedPos = 6;
        } else if ((active3 & 0x400000000000000L) != 0L) {
          jjmatchedKind = 250;
          jjmatchedPos = 6;
        }
        return jjMoveStringLiteralDfa7_0(
            active0,
            0L,
            active1,
            0x4000000L,
            active2,
            0L,
            active3,
            0xf800000000000000L,
            active4,
            0x1L);
      case 79:
        return jjMoveStringLiteralDfa7_0(
            active0, 0L, active1, 0x4000000000000000L, active2, 0L, active3, 0L, active4, 0L);
      case 80:
        return jjMoveStringLiteralDfa7_0(
            active0, 0L, active1, 0x8000000000L, active2, 0L, active3, 0L, active4, 0L);
      case 82:
        if ((active4 & 0x10L) != 0L) {
          jjmatchedKind = 260;
          jjmatchedPos = 6;
        }
        return jjMoveStringLiteralDfa7_0(
            active0, 0L, active1, 0x4011000000L, active2, 0L, active3, 0L, active4, 0L);
      case 83:
        if ((active1 & 0x4000L) != 0L) {
          jjmatchedKind = 78;
          jjmatchedPos = 6;
        } else if ((active1 & 0x8000000L) != 0L) {
          jjmatchedKind = 91;
          jjmatchedPos = 6;
        } else if ((active4 & 0x2L) != 0L) {
          jjmatchedKind = 257;
          jjmatchedPos = 6;
        }
        return jjMoveStringLiteralDfa7_0(
            active0, 0x2000L, active1, 0x4000800000000L, active2, 0L, active3, 0L, active4, 0L);
      case 84:
        if ((active0 & 0x200000000L) != 0L) {
          jjmatchedKind = 33;
          jjmatchedPos = 6;
        } else if ((active0 & 0x800000000000L) != 0L) {
          jjmatchedKind = 47;
          jjmatchedPos = 6;
        } else if ((active0 & 0x8000000000000000L) != 0L) {
          jjmatchedKind = 63;
          jjmatchedPos = 6;
        } else if ((active2 & 0x4000L) != 0L) {
          jjmatchedKind = 142;
          jjmatchedPos = 6;
        }
        return jjMoveStringLiteralDfa7_0(
            active0,
            0L,
            active1,
            0x8000150000800c00L,
            active2,
            0x1400000001L,
            active3,
            0L,
            active4,
            0L);
      case 85:
        return jjMoveStringLiteralDfa7_0(
            active0, 0L, active1, 0L, active2, 0x80L, active3, 0L, active4, 0L);
      case 90:
        return jjMoveStringLiteralDfa7_0(
            active0, 0L, active1, 0x8000200000000L, active2, 0L, active3, 0L, active4, 0L);
      case 97:
        return jjMoveStringLiteralDfa7_0(
            active0, 0L, active1, 0x100000000L, active2, 0x20000L, active3, 0L, active4, 0L);
      case 98:
        return jjMoveStringLiteralDfa7_0(
            active0, 0L, active1, 0x20000L, active2, 0L, active3, 0L, active4, 0L);
      case 99:
        return jjMoveStringLiteralDfa7_0(
            active0,
            0L,
            active1,
            0x1020000000L,
            active2,
            0x88010L,
            active3,
            0L,
            active4,
            0x200008L);
      case 100:
        if ((active0 & 0x8000000000L) != 0L) {
          jjmatchedKind = 39;
          jjmatchedPos = 6;
        } else if ((active1 & 0x1000000000000L) != 0L) {
          jjmatchedKind = 112;
          jjmatchedPos = 6;
        }
        break;
      case 101:
        if ((active0 & 0x4000000000000000L) != 0L) {
          jjmatchedKind = 62;
          jjmatchedPos = 6;
        } else if ((active1 & 0x1L) != 0L) {
          jjmatchedKind = 64;
          jjmatchedPos = 6;
        } else if ((active1 & 0x80000L) != 0L) {
          jjmatchedKind = 83;
          jjmatchedPos = 6;
        } else if ((active1 & 0x100000L) != 0L) {
          jjmatchedKind = 84;
          jjmatchedPos = 6;
        } else if ((active1 & 0x400000000000L) != 0L) {
          jjmatchedKind = 110;
          jjmatchedPos = 6;
        } else if ((active1 & 0x40000000000000L) != 0L) {
          jjmatchedKind = 118;
          jjmatchedPos = 6;
        } else if ((active1 & 0x800000000000000L) != 0L) {
          jjmatchedKind = 123;
          jjmatchedPos = 6;
        } else if ((active2 & 0x800L) != 0L) {
          jjmatchedKind = 139;
          jjmatchedPos = 6;
        }
        return jjMoveStringLiteralDfa7_0(
            active0, 0x800000000L, active1, 0x4L, active2, 0L, active3, 0L, active4, 0L);
      case 102:
        return jjMoveStringLiteralDfa7_0(
            active0, 0L, active1, 0x10L, active2, 0x20000000L, active3, 0L, active4, 0L);
      case 103:
        return jjMoveStringLiteralDfa7_0(
            active0, 0L, active1, 0x8L, active2, 0x2L, active3, 0L, active4, 0x400000L);
      case 104:
        if ((active2 & 0x2000000L) != 0L) {
          jjmatchedKind = 153;
          jjmatchedPos = 6;
        }
        return jjMoveStringLiteralDfa7_0(
            active0, 0L, active1, 0x20L, active2, 0L, active3, 0L, active4, 0L);
      case 105:
        return jjMoveStringLiteralDfa7_0(
            active0, 0L, active1, 0x40000L, active2, 0x10000200L, active3, 0L, active4, 0L);
      case 108:
        return jjMoveStringLiteralDfa7_0(
            active0,
            0x8000000000000L,
            active1,
            0xa000L,
            active2,
            0x8000000L,
            active3,
            0L,
            active4,
            0L);
      case 109:
        return jjMoveStringLiteralDfa7_0(
            active0, 0L, active1, 0x400000000L, active2, 0L, active3, 0L, active4, 0L);
      case 110:
        if ((active1 & 0x80000000000000L) != 0L) {
          jjmatchedKind = 119;
          jjmatchedPos = 6;
        } else if ((active3 & 0x400000000000000L) != 0L) {
          jjmatchedKind = 250;
          jjmatchedPos = 6;
        }
        return jjMoveStringLiteralDfa7_0(
            active0,
            0L,
            active1,
            0x4000000L,
            active2,
            0L,
            active3,
            0xf800000000000000L,
            active4,
            0x1L);
      case 111:
        return jjMoveStringLiteralDfa7_0(
            active0, 0L, active1, 0x4000000000000000L, active2, 0L, active3, 0L, active4, 0x20000L);
      case 112:
        return jjMoveStringLiteralDfa7_0(
            active0, 0L, active1, 0x8000000000L, active2, 0L, active3, 0L, active4, 0L);
      case 114:
        if ((active4 & 0x10L) != 0L) {
          jjmatchedKind = 260;
          jjmatchedPos = 6;
        }
        return jjMoveStringLiteralDfa7_0(
            active0, 0L, active1, 0x4011000000L, active2, 0L, active3, 0L, active4, 0x100c0000L);
      case 115:
        if ((active1 & 0x4000L) != 0L) {
          jjmatchedKind = 78;
          jjmatchedPos = 6;
        } else if ((active1 & 0x8000000L) != 0L) {
          jjmatchedKind = 91;
          jjmatchedPos = 6;
        } else if ((active4 & 0x2L) != 0L) {
          jjmatchedKind = 257;
          jjmatchedPos = 6;
        }
        return jjMoveStringLiteralDfa7_0(
            active0, 0x2000L, active1, 0x4000800000000L, active2, 0L, active3, 0L, active4, 0L);
      case 116:
        if ((active0 & 0x200000000L) != 0L) {
          jjmatchedKind = 33;
          jjmatchedPos = 6;
        } else if ((active0 & 0x800000000000L) != 0L) {
          jjmatchedKind = 47;
          jjmatchedPos = 6;
        } else if ((active0 & 0x8000000000000000L) != 0L) {
          jjmatchedKind = 63;
          jjmatchedPos = 6;
        } else if ((active2 & 0x4000L) != 0L) {
          jjmatchedKind = 142;
          jjmatchedPos = 6;
        }
        return jjMoveStringLiteralDfa7_0(
            active0,
            0L,
            active1,
            0x8000150000800c00L,
            active2,
            0x1400000001L,
            active3,
            0L,
            active4,
            0x2000000L);
      case 117:
        return jjMoveStringLiteralDfa7_0(
            active0, 0L, active1, 0L, active2, 0x80L, active3, 0L, active4, 0L);
      case 122:
        return jjMoveStringLiteralDfa7_0(
            active0, 0L, active1, 0x8000200000000L, active2, 0L, active3, 0L, active4, 0L);
      default:
        break;
    }
    return jjMoveNfa_0(3, 6);
  }

  private int jjMoveStringLiteralDfa7_0(
      long old0,
      long active0,
      long old1,
      long active1,
      long old2,
      long active2,
      long old3,
      long active3,
      long old4,
      long active4) {
    if (((active0 &= old0)
            | (active1 &= old1)
            | (active2 &= old2)
            | (active3 &= old3)
            | (active4 &= old4))
        == 0L) return jjMoveNfa_0(3, 6);
    try {
      curChar = input_stream.readChar();
    } catch (java.io.IOException e) {
      return jjMoveNfa_0(3, 6);
    }
    switch (curChar) {
      case 61:
        return jjMoveStringLiteralDfa8_0(
            active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x2000000L);
      case 65:
        if ((active1 & 0x100000000000L) != 0L) {
          jjmatchedKind = 108;
          jjmatchedPos = 7;
        }
        return jjMoveStringLiteralDfa8_0(
            active0,
            0x8000000000000L,
            active1,
            0xa000L,
            active2,
            0x10000000L,
            active3,
            0L,
            active4,
            0L);
      case 67:
        return jjMoveStringLiteralDfa8_0(
            active0, 0L, active1, 0x4000000L, active2, 0x1000000000L, active3, 0L, active4, 0L);
      case 69:
        if ((active0 & 0x2000L) != 0L) {
          jjmatchedKind = 13;
          jjmatchedPos = 7;
        } else if ((active1 & 0x800000L) != 0L) {
          jjmatchedKind = 87;
          jjmatchedPos = 7;
        } else if ((active1 & 0x200000000L) != 0L) {
          jjmatchedKind = 97;
          jjmatchedPos = 7;
        } else if ((active1 & 0x4000000000000L) != 0L) {
          jjmatchedKind = 114;
          jjmatchedPos = 7;
        } else if ((active1 & 0x8000000000000L) != 0L) {
          jjmatchedKind = 115;
          jjmatchedPos = 7;
        } else if ((active2 & 0x2L) != 0L) {
          jjmatchedKind = 129;
          jjmatchedPos = 7;
        } else if ((active2 & 0x80L) != 0L) {
          jjmatchedKind = 135;
          jjmatchedPos = 7;
        } else if ((active2 & 0x8000L) != 0L) {
          jjmatchedKind = 143;
          jjmatchedPos = 7;
        }
        return jjMoveStringLiteralDfa8_0(
            active0, 0L, active1, 0x8000000000000000L, active2, 0x1L, active3, 0L, active4, 0x8L);
      case 72:
        if ((active1 & 0x400L) != 0L) {
          jjmatchedKind = 74;
          jjmatchedPos = 7;
        } else if ((active1 & 0x800L) != 0L) {
          jjmatchedKind = 75;
          jjmatchedPos = 7;
        }
        break;
      case 73:
        return jjMoveStringLiteralDfa8_0(
            active0, 0L, active1, 0x10000000010L, active2, 0x28000000L, active3, 0L, active4, 0L);
      case 75:
        if ((active2 & 0x10L) != 0L) {
          jjmatchedKind = 132;
          jjmatchedPos = 7;
        }
        break;
      case 76:
        if ((active1 & 0x4L) != 0L) {
          jjmatchedKind = 66;
          jjmatchedPos = 7;
        } else if ((active2 & 0x20000L) != 0L) {
          jjmatchedKind = 145;
          jjmatchedPos = 7;
        }
        return jjMoveStringLiteralDfa8_0(
            active0, 0L, active1, 0x1000020000L, active2, 0L, active3, 0L, active4, 0L);
      case 77:
        return jjMoveStringLiteralDfa8_0(
            active0, 0L, active1, 0x100000000L, active2, 0L, active3, 0L, active4, 0L);
      case 78:
        if ((active1 & 0x4000000000000000L) != 0L) {
          jjmatchedKind = 126;
          jjmatchedPos = 7;
        }
        return jjMoveStringLiteralDfa8_0(
            active0, 0x800000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L);
      case 79:
        return jjMoveStringLiteralDfa8_0(
            active0, 0L, active1, 0x400040000L, active2, 0x200L, active3, 0L, active4, 0L);
      case 80:
        return jjMoveStringLiteralDfa8_0(
            active0, 0L, active1, 0x1000000L, active2, 0L, active3, 0L, active4, 0L);
      case 83:
        if ((active1 & 0x10000000L) != 0L) {
          jjmatchedKind = 92;
          jjmatchedPos = 7;
        } else if ((active3 & 0x800000000000000L) != 0L) {
          jjmatchedKind = 251;
          jjmatchedPos = 7;
        }
        return jjMoveStringLiteralDfa8_0(
            active0,
            0L,
            active1,
            0x4000000000L,
            active2,
            0L,
            active3,
            0xf000000000000000L,
            active4,
            0x1L);
      case 84:
        if ((active1 & 0x20000000L) != 0L) {
          jjmatchedKind = 93;
          jjmatchedPos = 7;
        } else if ((active2 & 0x80000L) != 0L) {
          jjmatchedKind = 147;
          jjmatchedPos = 7;
        }
        return jjMoveStringLiteralDfa8_0(
            active0, 0L, active1, 0x8800000000L, active2, 0L, active3, 0L, active4, 0L);
      case 89:
        if ((active1 & 0x8L) != 0L) {
          jjmatchedKind = 67;
          jjmatchedPos = 7;
        } else if ((active1 & 0x40000000000L) != 0L) {
          jjmatchedKind = 106;
          jjmatchedPos = 7;
        } else if ((active2 & 0x400000000L) != 0L) {
          jjmatchedKind = 162;
          jjmatchedPos = 7;
        }
        break;
      case 95:
        return jjMoveStringLiteralDfa8_0(
            active0, 0L, active1, 0x20L, active2, 0L, active3, 0L, active4, 0L);
      case 97:
        if ((active1 & 0x100000000000L) != 0L) {
          jjmatchedKind = 108;
          jjmatchedPos = 7;
        }
        return jjMoveStringLiteralDfa8_0(
            active0,
            0x8000000000000L,
            active1,
            0xa000L,
            active2,
            0x10000000L,
            active3,
            0L,
            active4,
            0L);
      case 99:
        return jjMoveStringLiteralDfa8_0(
            active0, 0L, active1, 0x4000000L, active2, 0x1000000000L, active3, 0L, active4, 0L);
      case 101:
        if ((active0 & 0x2000L) != 0L) {
          jjmatchedKind = 13;
          jjmatchedPos = 7;
        } else if ((active1 & 0x800000L) != 0L) {
          jjmatchedKind = 87;
          jjmatchedPos = 7;
        } else if ((active1 & 0x200000000L) != 0L) {
          jjmatchedKind = 97;
          jjmatchedPos = 7;
        } else if ((active1 & 0x4000000000000L) != 0L) {
          jjmatchedKind = 114;
          jjmatchedPos = 7;
        } else if ((active1 & 0x8000000000000L) != 0L) {
          jjmatchedKind = 115;
          jjmatchedPos = 7;
        } else if ((active2 & 0x2L) != 0L) {
          jjmatchedKind = 129;
          jjmatchedPos = 7;
        } else if ((active2 & 0x80L) != 0L) {
          jjmatchedKind = 135;
          jjmatchedPos = 7;
        } else if ((active2 & 0x8000L) != 0L) {
          jjmatchedKind = 143;
          jjmatchedPos = 7;
        }
        return jjMoveStringLiteralDfa8_0(
            active0,
            0L,
            active1,
            0x8000000000000000L,
            active2,
            0x1L,
            active3,
            0L,
            active4,
            0x10400008L);
      case 104:
        if ((active1 & 0x400L) != 0L) {
          jjmatchedKind = 74;
          jjmatchedPos = 7;
        } else if ((active1 & 0x800L) != 0L) {
          jjmatchedKind = 75;
          jjmatchedPos = 7;
        }
        break;
      case 105:
        return jjMoveStringLiteralDfa8_0(
            active0, 0L, active1, 0x10000000010L, active2, 0x28000000L, active3, 0L, active4, 0L);
      case 107:
        if ((active2 & 0x10L) != 0L) {
          jjmatchedKind = 132;
          jjmatchedPos = 7;
        }
        break;
      case 108:
        if ((active1 & 0x4L) != 0L) {
          jjmatchedKind = 66;
          jjmatchedPos = 7;
        } else if ((active2 & 0x20000L) != 0L) {
          jjmatchedKind = 145;
          jjmatchedPos = 7;
        }
        return jjMoveStringLiteralDfa8_0(
            active0, 0L, active1, 0x1000020000L, active2, 0L, active3, 0L, active4, 0L);
      case 109:
        return jjMoveStringLiteralDfa8_0(
            active0, 0L, active1, 0x100000000L, active2, 0L, active3, 0L, active4, 0L);
      case 110:
        if ((active1 & 0x4000000000000000L) != 0L) {
          jjmatchedKind = 126;
          jjmatchedPos = 7;
        }
        return jjMoveStringLiteralDfa8_0(
            active0, 0x800000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L);
      case 111:
        return jjMoveStringLiteralDfa8_0(
            active0, 0L, active1, 0x400040000L, active2, 0x200L, active3, 0L, active4, 0x40000L);
      case 112:
        return jjMoveStringLiteralDfa8_0(
            active0, 0L, active1, 0x1000000L, active2, 0L, active3, 0L, active4, 0L);
      case 114:
        return jjMoveStringLiteralDfa8_0(
            active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x20000L);
      case 115:
        if ((active1 & 0x10000000L) != 0L) {
          jjmatchedKind = 92;
          jjmatchedPos = 7;
        } else if ((active3 & 0x800000000000000L) != 0L) {
          jjmatchedKind = 251;
          jjmatchedPos = 7;
        } else if ((active4 & 0x80000L) != 0L) {
          jjmatchedKind = 275;
          jjmatchedPos = 7;
        }
        return jjMoveStringLiteralDfa8_0(
            active0,
            0L,
            active1,
            0x4000000000L,
            active2,
            0L,
            active3,
            0xf000000000000000L,
            active4,
            0x1L);
      case 116:
        if ((active1 & 0x20000000L) != 0L) {
          jjmatchedKind = 93;
          jjmatchedPos = 7;
        } else if ((active2 & 0x80000L) != 0L) {
          jjmatchedKind = 147;
          jjmatchedPos = 7;
        }
        return jjMoveStringLiteralDfa8_0(
            active0, 0L, active1, 0x8800000000L, active2, 0L, active3, 0L, active4, 0L);
      case 121:
        if ((active1 & 0x8L) != 0L) {
          jjmatchedKind = 67;
          jjmatchedPos = 7;
        } else if ((active1 & 0x40000000000L) != 0L) {
          jjmatchedKind = 106;
          jjmatchedPos = 7;
        } else if ((active2 & 0x400000000L) != 0L) {
          jjmatchedKind = 162;
          jjmatchedPos = 7;
        } else if ((active4 & 0x200000L) != 0L) {
          jjmatchedKind = 277;
          jjmatchedPos = 7;
        }
        break;
      default:
        break;
    }
    return jjMoveNfa_0(3, 7);
  }

  private int jjMoveStringLiteralDfa8_0(
      long old0,
      long active0,
      long old1,
      long active1,
      long old2,
      long active2,
      long old3,
      long active3,
      long old4,
      long active4) {
    if (((active0 &= old0)
            | (active1 &= old1)
            | (active2 &= old2)
            | (active3 &= old3)
            | (active4 &= old4))
        == 0L) return jjMoveNfa_0(3, 7);
    try {
      curChar = input_stream.readChar();
    } catch (java.io.IOException e) {
      return jjMoveNfa_0(3, 7);
    }
    switch (curChar) {
      case 65:
        return jjMoveStringLiteralDfa9_0(
            active0,
            0L,
            active1,
            0L,
            active2,
            0x8000000L,
            active3,
            0x3000000000000000L,
            active4,
            0L);
      case 68:
        return jjMoveStringLiteralDfa9_0(
            active0, 0L, active1, 0x400000000L, active2, 0L, active3, 0L, active4, 0L);
      case 69:
        if ((active1 & 0x20000L) != 0L) {
          jjmatchedKind = 81;
          jjmatchedPos = 8;
        } else if ((active1 & 0x100000000L) != 0L) {
          jjmatchedKind = 96;
          jjmatchedPos = 8;
        }
        return jjMoveStringLiteralDfa9_0(
            active0, 0L, active1, 0x4804000000L, active2, 0x20000000L, active3, 0L, active4, 0L);
      case 70:
        return jjMoveStringLiteralDfa9_0(
            active0, 0L, active1, 0x20L, active2, 0L, active3, 0L, active4, 0L);
      case 72:
        return jjMoveStringLiteralDfa9_0(
            active0, 0L, active1, 0x1000000L, active2, 0L, active3, 0L, active4, 0L);
      case 73:
        return jjMoveStringLiteralDfa9_0(
            active0, 0L, active1, 0x8000000000L, active2, 0L, active3, 0L, active4, 0L);
      case 75:
        return jjMoveStringLiteralDfa9_0(
            active0, 0L, active1, 0L, active2, 0L, active3, 0x4000000000000000L, active4, 0L);
      case 76:
        return jjMoveStringLiteralDfa9_0(
            active0, 0L, active1, 0L, active2, 0x1000000000L, active3, 0L, active4, 0L);
      case 78:
        if ((active0 & 0x8000000000000L) != 0L) {
          jjmatchedKind = 51;
          jjmatchedPos = 8;
        } else if ((active1 & 0x40000L) != 0L) {
          jjmatchedKind = 82;
          jjmatchedPos = 8;
        } else if ((active2 & 0x200L) != 0L) {
          jjmatchedKind = 137;
          jjmatchedPos = 8;
        }
        return jjMoveStringLiteralDfa9_0(
            active0, 0L, active1, 0L, active2, 0x1L, active3, 0L, active4, 0L);
      case 79:
        return jjMoveStringLiteralDfa9_0(
            active0, 0L, active1, 0x10000000000L, active2, 0L, active3, 0L, active4, 0x8L);
      case 82:
        return jjMoveStringLiteralDfa9_0(
            active0, 0L, active1, 0x8000000000000010L, active2, 0L, active3, 0L, active4, 0L);
      case 83:
        if ((active2 & 0x10000000L) != 0L) {
          jjmatchedKind = 156;
          jjmatchedPos = 8;
        }
        return jjMoveStringLiteralDfa9_0(
            active0, 0L, active1, 0xa000L, active2, 0L, active3, 0L, active4, 0L);
      case 84:
        if ((active0 & 0x800000000L) != 0L) {
          jjmatchedKind = 35;
          jjmatchedPos = 8;
        }
        return jjMoveStringLiteralDfa9_0(
            active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x1L);
      case 85:
        return jjMoveStringLiteralDfa9_0(
            active0, 0L, active1, 0x1000000000L, active2, 0L, active3, 0L, active4, 0L);
      case 86:
        return jjMoveStringLiteralDfa9_0(
            active0, 0L, active1, 0L, active2, 0L, active3, 0x8000000000000000L, active4, 0L);
      case 97:
        return jjMoveStringLiteralDfa9_0(
            active0,
            0L,
            active1,
            0L,
            active2,
            0x8000000L,
            active3,
            0x3000000000000000L,
            active4,
            0L);
      case 98:
        return jjMoveStringLiteralDfa9_0(
            active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x40000L);
      case 100:
        return jjMoveStringLiteralDfa9_0(
            active0, 0L, active1, 0x400000000L, active2, 0L, active3, 0L, active4, 0x20000L);
      case 101:
        if ((active1 & 0x20000L) != 0L) {
          jjmatchedKind = 81;
          jjmatchedPos = 8;
        } else if ((active1 & 0x100000000L) != 0L) {
          jjmatchedKind = 96;
          jjmatchedPos = 8;
        }
        return jjMoveStringLiteralDfa9_0(
            active0, 0L, active1, 0x4804000000L, active2, 0x20000000L, active3, 0L, active4, 0L);
      case 102:
        return jjMoveStringLiteralDfa9_0(
            active0, 0L, active1, 0x20L, active2, 0L, active3, 0L, active4, 0L);
      case 104:
        return jjMoveStringLiteralDfa9_0(
            active0, 0L, active1, 0x1000000L, active2, 0L, active3, 0L, active4, 0L);
      case 105:
        return jjMoveStringLiteralDfa9_0(
            active0, 0L, active1, 0x8000000000L, active2, 0L, active3, 0L, active4, 0L);
      case 107:
        return jjMoveStringLiteralDfa9_0(
            active0, 0L, active1, 0L, active2, 0L, active3, 0x4000000000000000L, active4, 0L);
      case 108:
        return jjMoveStringLiteralDfa9_0(
            active0, 0L, active1, 0L, active2, 0x1000000000L, active3, 0L, active4, 0L);
      case 110:
        if ((active0 & 0x8000000000000L) != 0L) {
          jjmatchedKind = 51;
          jjmatchedPos = 8;
        } else if ((active1 & 0x40000L) != 0L) {
          jjmatchedKind = 82;
          jjmatchedPos = 8;
        } else if ((active2 & 0x200L) != 0L) {
          jjmatchedKind = 137;
          jjmatchedPos = 8;
        }
        return jjMoveStringLiteralDfa9_0(
            active0, 0L, active1, 0L, active2, 0x1L, active3, 0L, active4, 0L);
      case 111:
        return jjMoveStringLiteralDfa9_0(
            active0, 0L, active1, 0x10000000000L, active2, 0L, active3, 0L, active4, 0x8L);
      case 112:
        return jjMoveStringLiteralDfa9_0(
            active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x10000000L);
      case 114:
        return jjMoveStringLiteralDfa9_0(
            active0, 0L, active1, 0x8000000000000010L, active2, 0L, active3, 0L, active4, 0L);
      case 115:
        if ((active2 & 0x10000000L) != 0L) {
          jjmatchedKind = 156;
          jjmatchedPos = 8;
        } else if ((active4 & 0x400000L) != 0L) {
          jjmatchedKind = 278;
          jjmatchedPos = 8;
        }
        return jjMoveStringLiteralDfa9_0(
            active0, 0L, active1, 0xa000L, active2, 0L, active3, 0L, active4, 0L);
      case 116:
        if ((active0 & 0x800000000L) != 0L) {
          jjmatchedKind = 35;
          jjmatchedPos = 8;
        }
        return jjMoveStringLiteralDfa9_0(
            active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x2000001L);
      case 117:
        return jjMoveStringLiteralDfa9_0(
            active0, 0L, active1, 0x1000000000L, active2, 0L, active3, 0L, active4, 0L);
      case 118:
        return jjMoveStringLiteralDfa9_0(
            active0, 0L, active1, 0L, active2, 0L, active3, 0x8000000000000000L, active4, 0L);
      default:
        break;
    }
    return jjMoveNfa_0(3, 8);
  }

  private int jjMoveStringLiteralDfa9_0(
      long old0,
      long active0,
      long old1,
      long active1,
      long old2,
      long active2,
      long old3,
      long active3,
      long old4,
      long active4) {
    if (((active0 &= old0)
            | (active1 &= old1)
            | (active2 &= old2)
            | (active3 &= old3)
            | (active4 &= old4))
        == 0L) return jjMoveNfa_0(3, 8);
    try {
      curChar = input_stream.readChar();
    } catch (java.io.IOException e) {
      return jjMoveNfa_0(3, 8);
    }
    switch (curChar) {
      case 65:
        return jjMoveStringLiteralDfa10_0(
            active1, 0L, active2, 0L, active3, 0x8000000000000000L, active4, 0L);
      case 68:
        if ((active2 & 0x20000000L) != 0L) {
          jjmatchedKind = 157;
          jjmatchedPos = 9;
        }
        break;
      case 69:
        if ((active1 & 0x400000000L) != 0L) {
          jjmatchedKind = 98;
          jjmatchedPos = 9;
        }
        return jjMoveStringLiteralDfa10_0(
            active1, 0L, active2, 0L, active3, 0x4000000000000000L, active4, 0x1L);
      case 70:
        if ((active4 & 0x8L) != 0L) {
          jjmatchedKind = 259;
          jjmatchedPos = 9;
        }
        break;
      case 73:
        return jjMoveStringLiteralDfa10_0(
            active1, 0x1000020L, active2, 0L, active3, 0L, active4, 0L);
      case 76:
        return jjMoveStringLiteralDfa10_0(
            active1, 0x4000000000L, active2, 0L, active3, 0x1000000000000000L, active4, 0L);
      case 78:
        if ((active1 & 0x10000000000L) != 0L) {
          jjmatchedKind = 104;
          jjmatchedPos = 9;
        }
        return jjMoveStringLiteralDfa10_0(
            active1, 0L, active2, 0L, active3, 0x2000000000000000L, active4, 0L);
      case 79:
        return jjMoveStringLiteralDfa10_0(
            active1, 0x8000000000L, active2, 0L, active3, 0L, active4, 0L);
      case 82:
        if ((active1 & 0x800000000L) != 0L) {
          jjmatchedKind = 99;
          jjmatchedPos = 9;
        }
        break;
      case 83:
        if ((active1 & 0x2000L) != 0L) {
          jjmatchedKind = 77;
          jjmatchedPos = 9;
        } else if ((active1 & 0x4000000L) != 0L) {
          jjmatchedKind = 90;
          jjmatchedPos = 9;
        } else if ((active1 & 0x8000000000000000L) != 0L) {
          jjmatchedKind = 127;
          jjmatchedPos = 9;
        } else if ((active2 & 0x8000000L) != 0L) {
          jjmatchedKind = 155;
          jjmatchedPos = 9;
        }
        return jjMoveStringLiteralDfa10_0(
            active1, 0x1000008010L, active2, 0L, active3, 0L, active4, 0L);
      case 84:
        if ((active2 & 0x1L) != 0L) {
          jjmatchedKind = 128;
          jjmatchedPos = 9;
        }
        break;
      case 85:
        return jjMoveStringLiteralDfa10_0(
            active1, 0L, active2, 0x1000000000L, active3, 0L, active4, 0L);
      case 97:
        return jjMoveStringLiteralDfa10_0(
            active1, 0L, active2, 0L, active3, 0x8000000000000000L, active4, 0L);
      case 100:
        if ((active2 & 0x20000000L) != 0L) {
          jjmatchedKind = 157;
          jjmatchedPos = 9;
        }
        break;
      case 101:
        if ((active1 & 0x400000000L) != 0L) {
          jjmatchedKind = 98;
          jjmatchedPos = 9;
        }
        return jjMoveStringLiteralDfa10_0(
            active1, 0L, active2, 0L, active3, 0x4000000000000000L, active4, 0x2000001L);
      case 102:
        if ((active4 & 0x8L) != 0L) {
          jjmatchedKind = 259;
          jjmatchedPos = 9;
        }
        break;
      case 105:
        return jjMoveStringLiteralDfa10_0(
            active1, 0x1000020L, active2, 0L, active3, 0L, active4, 0x40000L);
      case 108:
        return jjMoveStringLiteralDfa10_0(
            active1,
            0x4000000000L,
            active2,
            0L,
            active3,
            0x1000000000000000L,
            active4,
            0x10000000L);
      case 109:
        return jjMoveStringLiteralDfa10_0(active1, 0L, active2, 0L, active3, 0L, active4, 0x20000L);
      case 110:
        if ((active1 & 0x10000000000L) != 0L) {
          jjmatchedKind = 104;
          jjmatchedPos = 9;
        }
        return jjMoveStringLiteralDfa10_0(
            active1, 0L, active2, 0L, active3, 0x2000000000000000L, active4, 0L);
      case 111:
        return jjMoveStringLiteralDfa10_0(
            active1, 0x8000000000L, active2, 0L, active3, 0L, active4, 0L);
      case 114:
        if ((active1 & 0x800000000L) != 0L) {
          jjmatchedKind = 99;
          jjmatchedPos = 9;
        }
        break;
      case 115:
        if ((active1 & 0x2000L) != 0L) {
          jjmatchedKind = 77;
          jjmatchedPos = 9;
        } else if ((active1 & 0x4000000L) != 0L) {
          jjmatchedKind = 90;
          jjmatchedPos = 9;
        } else if ((active1 & 0x8000000000000000L) != 0L) {
          jjmatchedKind = 127;
          jjmatchedPos = 9;
        } else if ((active2 & 0x8000000L) != 0L) {
          jjmatchedKind = 155;
          jjmatchedPos = 9;
        }
        return jjMoveStringLiteralDfa10_0(
            active1, 0x1000008010L, active2, 0L, active3, 0L, active4, 0L);
      case 116:
        if ((active2 & 0x1L) != 0L) {
          jjmatchedKind = 128;
          jjmatchedPos = 9;
        }
        break;
      case 117:
        return jjMoveStringLiteralDfa10_0(
            active1, 0L, active2, 0x1000000000L, active3, 0L, active4, 0L);
      default:
        break;
    }
    return jjMoveNfa_0(3, 9);
  }

  private int jjMoveStringLiteralDfa10_0(
      long old1,
      long active1,
      long old2,
      long active2,
      long old3,
      long active3,
      long old4,
      long active4) {
    if (((active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4)) == 0L)
      return jjMoveNfa_0(3, 9);
    try {
      curChar = input_stream.readChar();
    } catch (java.io.IOException e) {
      return jjMoveNfa_0(3, 9);
    }
    switch (curChar) {
      case 67:
        if ((active1 & 0x1000000L) != 0L) {
          jjmatchedKind = 88;
          jjmatchedPos = 10;
        }
        break;
      case 69:
        return jjMoveStringLiteralDfa11_0(
            active1, 0x4000008000L, active2, 0L, active3, 0L, active4, 0L);
      case 76:
        if ((active3 & 0x1000000000000000L) != 0L) {
          jjmatchedKind = 252;
          jjmatchedPos = 10;
        }
        return jjMoveStringLiteralDfa11_0(
            active1, 0L, active2, 0L, active3, 0x8000000000000000L, active4, 0L);
      case 78:
        if ((active1 & 0x8000000000L) != 0L) {
          jjmatchedKind = 103;
          jjmatchedPos = 10;
        }
        break;
      case 82:
        return jjMoveStringLiteralDfa11_0(active1, 0x20L, active2, 0L, active3, 0L, active4, 0L);
      case 83:
        return jjMoveStringLiteralDfa11_0(
            active1, 0L, active2, 0x1000000000L, active3, 0L, active4, 0L);
      case 84:
        if ((active1 & 0x10L) != 0L) {
          jjmatchedKind = 68;
          jjmatchedPos = 10;
        }
        return jjMoveStringLiteralDfa11_0(
            active1, 0x1000000000L, active2, 0L, active3, 0L, active4, 0L);
      case 88:
        return jjMoveStringLiteralDfa11_0(active1, 0L, active2, 0L, active3, 0L, active4, 0x1L);
      case 89:
        if ((active3 & 0x2000000000000000L) != 0L) {
          jjmatchedKind = 253;
          jjmatchedPos = 10;
        } else if ((active3 & 0x4000000000000000L) != 0L) {
          jjmatchedKind = 254;
          jjmatchedPos = 10;
        }
        break;
      case 97:
        return jjMoveStringLiteralDfa11_0(
            active1, 0L, active2, 0L, active3, 0L, active4, 0x10020000L);
      case 99:
        if ((active1 & 0x1000000L) != 0L) {
          jjmatchedKind = 88;
          jjmatchedPos = 10;
        }
        break;
      case 101:
        return jjMoveStringLiteralDfa11_0(
            active1, 0x4000008000L, active2, 0L, active3, 0L, active4, 0L);
      case 108:
        if ((active3 & 0x1000000000000000L) != 0L) {
          jjmatchedKind = 252;
          jjmatchedPos = 10;
        }
        return jjMoveStringLiteralDfa11_0(
            active1, 0L, active2, 0L, active3, 0x8000000000000000L, active4, 0L);
      case 110:
        if ((active1 & 0x8000000000L) != 0L) {
          jjmatchedKind = 103;
          jjmatchedPos = 10;
        } else if ((active4 & 0x40000L) != 0L) {
          jjmatchedKind = 274;
          jjmatchedPos = 10;
        }
        break;
      case 114:
        return jjMoveStringLiteralDfa11_0(active1, 0x20L, active2, 0L, active3, 0L, active4, 0L);
      case 115:
        return jjMoveStringLiteralDfa11_0(
            active1, 0L, active2, 0x1000000000L, active3, 0L, active4, 0L);
      case 116:
        if ((active1 & 0x10L) != 0L) {
          jjmatchedKind = 68;
          jjmatchedPos = 10;
        }
        return jjMoveStringLiteralDfa11_0(
            active1, 0x1000000000L, active2, 0L, active3, 0L, active4, 0L);
      case 120:
        return jjMoveStringLiteralDfa11_0(
            active1, 0L, active2, 0L, active3, 0L, active4, 0x2000001L);
      case 121:
        if ((active3 & 0x2000000000000000L) != 0L) {
          jjmatchedKind = 253;
          jjmatchedPos = 10;
        } else if ((active3 & 0x4000000000000000L) != 0L) {
          jjmatchedKind = 254;
          jjmatchedPos = 10;
        }
        break;
      default:
        break;
    }
    return jjMoveNfa_0(3, 10);
  }

  private int jjMoveStringLiteralDfa11_0(
      long old1,
      long active1,
      long old2,
      long active2,
      long old3,
      long active3,
      long old4,
      long active4) {
    if (((active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4)) == 0L)
      return jjMoveNfa_0(3, 10);
    try {
      curChar = input_stream.readChar();
    } catch (java.io.IOException e) {
      return jjMoveNfa_0(3, 10);
    }
    switch (curChar) {
      case 67:
        return jjMoveStringLiteralDfa12_0(
            active1, 0x4000000000L, active2, 0L, active3, 0L, active4, 0L);
      case 69:
        return jjMoveStringLiteralDfa12_0(
            active1, 0x1000000000L, active2, 0L, active3, 0L, active4, 0L);
      case 83:
        if ((active1 & 0x8000L) != 0L) {
          jjmatchedKind = 79;
          jjmatchedPos = 11;
        }
        return jjMoveStringLiteralDfa12_0(active1, 0x20L, active2, 0L, active3, 0L, active4, 0L);
      case 84:
        if ((active4 & 0x1L) != 0L) {
          jjmatchedKind = 256;
          jjmatchedPos = 11;
        }
        return jjMoveStringLiteralDfa12_0(
            active1, 0L, active2, 0x1000000000L, active3, 0L, active4, 0L);
      case 85:
        return jjMoveStringLiteralDfa12_0(
            active1, 0L, active2, 0L, active3, 0x8000000000000000L, active4, 0L);
      case 99:
        return jjMoveStringLiteralDfa12_0(
            active1, 0x4000000000L, active2, 0L, active3, 0L, active4, 0x10000000L);
      case 101:
        return jjMoveStringLiteralDfa12_0(
            active1, 0x1000000000L, active2, 0L, active3, 0L, active4, 0L);
      case 112:
        return jjMoveStringLiteralDfa12_0(active1, 0L, active2, 0L, active3, 0L, active4, 0x20000L);
      case 115:
        if ((active1 & 0x8000L) != 0L) {
          jjmatchedKind = 79;
          jjmatchedPos = 11;
        }
        return jjMoveStringLiteralDfa12_0(active1, 0x20L, active2, 0L, active3, 0L, active4, 0L);
      case 116:
        if ((active4 & 0x1L) != 0L) {
          jjmatchedKind = 256;
          jjmatchedPos = 11;
        } else if ((active4 & 0x2000000L) != 0L) {
          jjmatchedKind = 281;
          jjmatchedPos = 11;
        }
        return jjMoveStringLiteralDfa12_0(
            active1, 0L, active2, 0x1000000000L, active3, 0L, active4, 0L);
      case 117:
        return jjMoveStringLiteralDfa12_0(
            active1, 0L, active2, 0L, active3, 0x8000000000000000L, active4, 0L);
      default:
        break;
    }
    return jjMoveNfa_0(3, 11);
  }

  private int jjMoveStringLiteralDfa12_0(
      long old1,
      long active1,
      long old2,
      long active2,
      long old3,
      long active3,
      long old4,
      long active4) {
    if (((active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4)) == 0L)
      return jjMoveNfa_0(3, 11);
    try {
      curChar = input_stream.readChar();
    } catch (java.io.IOException e) {
      return jjMoveNfa_0(3, 11);
    }
    switch (curChar) {
      case 64:
        return jjMoveStringLiteralDfa13_0(active1, 0L, active2, 0L, active3, 0L, active4, 0x20000L);
      case 69:
        if ((active3 & 0x8000000000000000L) != 0L) {
          jjmatchedKind = 255;
          jjmatchedPos = 12;
        }
        return jjMoveStringLiteralDfa13_0(
            active1, 0L, active2, 0x1000000000L, active3, 0L, active4, 0L);
      case 82:
        if ((active1 & 0x1000000000L) != 0L) {
          jjmatchedKind = 100;
          jjmatchedPos = 12;
        }
        break;
      case 84:
        if ((active1 & 0x20L) != 0L) {
          jjmatchedKind = 69;
          jjmatchedPos = 12;
        }
        return jjMoveStringLiteralDfa13_0(
            active1, 0x4000000000L, active2, 0L, active3, 0L, active4, 0L);
      case 101:
        if ((active3 & 0x8000000000000000L) != 0L) {
          jjmatchedKind = 255;
          jjmatchedPos = 12;
        } else if ((active4 & 0x10000000L) != 0L) {
          jjmatchedKind = 284;
          jjmatchedPos = 12;
        }
        return jjMoveStringLiteralDfa13_0(
            active1, 0L, active2, 0x1000000000L, active3, 0L, active4, 0L);
      case 114:
        if ((active1 & 0x1000000000L) != 0L) {
          jjmatchedKind = 100;
          jjmatchedPos = 12;
        }
        break;
      case 116:
        if ((active1 & 0x20L) != 0L) {
          jjmatchedKind = 69;
          jjmatchedPos = 12;
        }
        return jjMoveStringLiteralDfa13_0(
            active1, 0x4000000000L, active2, 0L, active3, 0L, active4, 0L);
      default:
        break;
    }
    return jjMoveNfa_0(3, 12);
  }

  private int jjMoveStringLiteralDfa13_0(
      long old1,
      long active1,
      long old2,
      long active2,
      long old3,
      long active3,
      long old4,
      long active4) {
    if (((active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4)) == 0L)
      return jjMoveNfa_0(3, 12);
    try {
      curChar = input_stream.readChar();
    } catch (java.io.IOException e) {
      return jjMoveNfa_0(3, 12);
    }
    switch (curChar) {
      case 73:
        return jjMoveStringLiteralDfa14_0(active1, 0x4000000000L, active2, 0L, active4, 0L);
      case 82:
        if ((active2 & 0x1000000000L) != 0L) {
          jjmatchedKind = 164;
          jjmatchedPos = 13;
        }
        break;
      case 95:
        return jjMoveStringLiteralDfa14_0(active1, 0L, active2, 0L, active4, 0x20000L);
      case 105:
        return jjMoveStringLiteralDfa14_0(active1, 0x4000000000L, active2, 0L, active4, 0L);
      case 114:
        if ((active2 & 0x1000000000L) != 0L) {
          jjmatchedKind = 164;
          jjmatchedPos = 13;
        }
        break;
      default:
        break;
    }
    return jjMoveNfa_0(3, 13);
  }

  private int jjMoveStringLiteralDfa14_0(
      long old1, long active1, long old2, long active2, long old4, long active4) {
    if (((active1 &= old1) | (active2 &= old2) | (active4 &= old4)) == 0L)
      return jjMoveNfa_0(3, 13);
    try {
      curChar = input_stream.readChar();
    } catch (java.io.IOException e) {
      return jjMoveNfa_0(3, 13);
    }
    switch (curChar) {
      case 79:
        return jjMoveStringLiteralDfa15_0(active1, 0x4000000000L, active4, 0L);
      case 95:
        return jjMoveStringLiteralDfa15_0(active1, 0L, active4, 0x20000L);
      case 111:
        return jjMoveStringLiteralDfa15_0(active1, 0x4000000000L, active4, 0L);
      default:
        break;
    }
    return jjMoveNfa_0(3, 14);
  }

  private int jjMoveStringLiteralDfa15_0(long old1, long active1, long old4, long active4) {
    if (((active1 &= old1) | (active4 &= old4)) == 0L) return jjMoveNfa_0(3, 14);
    try {
      curChar = input_stream.readChar();
    } catch (java.io.IOException e) {
      return jjMoveNfa_0(3, 14);
    }
    switch (curChar) {
      case 78:
        if ((active1 & 0x4000000000L) != 0L) {
          jjmatchedKind = 102;
          jjmatchedPos = 15;
        }
        break;
      case 95:
        if ((active4 & 0x20000L) != 0L) {
          jjmatchedKind = 273;
          jjmatchedPos = 15;
        }
        break;
      case 110:
        if ((active1 & 0x4000000000L) != 0L) {
          jjmatchedKind = 102;
          jjmatchedPos = 15;
        }
        break;
      default:
        break;
    }
    return jjMoveNfa_0(3, 15);
  }

  static final long[] jjbitVec0 = {
    0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
  };
  static final long[] jjbitVec2 = {0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL};

  private int jjMoveNfa_0(int startState, int curPos) {
    int strKind = jjmatchedKind;
    int strPos = jjmatchedPos;
    int seenUpto;
    input_stream.backup(seenUpto = curPos + 1);
    try {
      curChar = input_stream.readChar();
    } catch (java.io.IOException e) {
      throw new Error("Internal Error");
    }
    curPos = 0;
    int startsAt = 0;
    jjnewStateCnt = 301;
    int i = 1;
    jjstateSet[0] = startState;
    int kind = 0x7fffffff;
    for (; ; ) {
      if (++jjround == 0x7fffffff) ReInitRounds();
      if (curChar < 64) {
        long l = 1L << curChar;
        do {
          switch (jjstateSet[--i]) {
            case 3:
              if ((0x3ff000000000000L & l) != 0L) {
                jjCheckNAddStates(0, 6);
              } else if (curChar == 45) {
                jjAddStates(7, 10);
              } else if (curChar == 39) {
                jjCheckNAddStates(11, 15);
              } else if (curChar == 36) {
                if (kind > 261) kind = 261;
                {
                  jjCheckNAdd(20);
                }
              } else if (curChar == 34) {
                jjCheckNAddStates(16, 18);
              } else if (curChar == 46) {
                jjCheckNAdd(5);
              } else if (curChar == 47) jjstateSet[jjnewStateCnt++] = 2;
              if ((0x3fe000000000000L & l) != 0L) {
                if (kind > 180) kind = 180;
                {
                  jjCheckNAddStates(19, 26);
                }
              } else if (curChar == 48) {
                if (kind > 180) kind = 180;
                {
                  jjCheckNAddStates(27, 39);
                }
              }
              break;
            case 0:
              if (curChar == 42) jjstateSet[jjnewStateCnt++] = 1;
              break;
            case 1:
              if ((0xffff7fffffffffffL & l) != 0L && kind > 7) kind = 7;
              break;
            case 2:
              if (curChar == 42) jjstateSet[jjnewStateCnt++] = 0;
              break;
            case 4:
              if (curChar == 46) {
                jjCheckNAdd(5);
              }
              break;
            case 5:
              if ((0x3ff000000000000L & l) == 0L) break;
              if (kind > 184) kind = 184;
              {
                jjCheckNAddStates(40, 42);
              }
              break;
            case 7:
              if ((0x280000000000L & l) != 0L) {
                jjCheckNAdd(8);
              }
              break;
            case 8:
              if ((0x3ff000000000000L & l) == 0L) break;
              if (kind > 184) kind = 184;
              {
                jjCheckNAddTwoStates(8, 9);
              }
              break;
            case 10:
              if (curChar == 34) {
                jjCheckNAddStates(16, 18);
              }
              break;
            case 11:
              if ((0xfffffffbffffdbffL & l) != 0L) {
                jjCheckNAddStates(16, 18);
              }
              break;
            case 13:
              if ((0x808400000000L & l) != 0L) {
                jjCheckNAddStates(16, 18);
              }
              break;
            case 14:
              if (curChar == 34 && kind > 190) kind = 190;
              break;
            case 15:
              if ((0xff000000000000L & l) != 0L) {
                jjCheckNAddStates(43, 46);
              }
              break;
            case 16:
              if ((0xff000000000000L & l) != 0L) {
                jjCheckNAddStates(16, 18);
              }
              break;
            case 17:
              if ((0xf000000000000L & l) != 0L) jjstateSet[jjnewStateCnt++] = 18;
              break;
            case 18:
              if ((0xff000000000000L & l) != 0L) {
                jjCheckNAdd(16);
              }
              break;
            case 19:
              if (curChar != 36) break;
              if (kind > 261) kind = 261;
              {
                jjCheckNAdd(20);
              }
              break;
            case 20:
              if ((0x3ff000000000000L & l) == 0L) break;
              if (kind > 261) kind = 261;
              {
                jjCheckNAdd(20);
              }
              break;
            case 22:
              {
                jjAddStates(47, 49);
              }
              break;
            case 27:
              if (curChar == 58) jjstateSet[jjnewStateCnt++] = 28;
              break;
            case 28:
              if (curChar != 36) break;
              if (kind > 269) kind = 269;
              {
                jjCheckNAdd(29);
              }
              break;
            case 29:
              if ((0x3ff000000000000L & l) == 0L) break;
              if (kind > 269) kind = 269;
              {
                jjCheckNAdd(29);
              }
              break;
            case 38:
              if ((0x3ff000000000000L & l) != 0L) {
                jjCheckNAddStates(0, 6);
              }
              break;
            case 39:
              if ((0x3ff000000000000L & l) != 0L) {
                jjCheckNAddStates(50, 52);
              }
              break;
            case 41:
              if ((0x280000000000L & l) != 0L) {
                jjCheckNAdd(42);
              }
              break;
            case 42:
              if ((0x3ff000000000000L & l) != 0L) {
                jjCheckNAddTwoStates(42, 9);
              }
              break;
            case 43:
              if ((0x3ff000000000000L & l) != 0L) {
                jjCheckNAddTwoStates(43, 44);
              }
              break;
            case 45:
              if ((0x280000000000L & l) != 0L) {
                jjCheckNAdd(46);
              }
              break;
            case 46:
              if ((0x3ff000000000000L & l) == 0L) break;
              if (kind > 184) kind = 184;
              {
                jjCheckNAddTwoStates(46, 9);
              }
              break;
            case 47:
              if ((0x3ff000000000000L & l) != 0L) {
                jjCheckNAddTwoStates(47, 48);
              }
              break;
            case 48:
              if (curChar != 46) break;
              if (kind > 184) kind = 184;
              {
                jjCheckNAddStates(53, 55);
              }
              break;
            case 49:
              if ((0x3ff000000000000L & l) == 0L) break;
              if (kind > 184) kind = 184;
              {
                jjCheckNAddStates(53, 55);
              }
              break;
            case 51:
              if ((0x280000000000L & l) != 0L) {
                jjCheckNAdd(52);
              }
              break;
            case 52:
              if ((0x3ff000000000000L & l) == 0L) break;
              if (kind > 184) kind = 184;
              {
                jjCheckNAddTwoStates(52, 9);
              }
              break;
            case 95:
              if ((0x3fe000000000000L & l) == 0L) break;
              if (kind > 180) kind = 180;
              {
                jjCheckNAddStates(19, 26);
              }
              break;
            case 96:
              if ((0x3ff000000000000L & l) == 0L) break;
              if (kind > 180) kind = 180;
              {
                jjCheckNAddTwoStates(96, 97);
              }
              break;
            case 98:
              if ((0x3ff000000000000L & l) != 0L) {
                jjCheckNAddStates(56, 58);
              }
              break;
            case 100:
              if (curChar == 46) {
                jjCheckNAddStates(59, 61);
              }
              break;
            case 101:
              if (curChar == 45) {
                jjCheckNAddTwoStates(102, 105);
              }
              break;
            case 102:
              if ((0x3fe000000000000L & l) == 0L) break;
              if (kind > 191) kind = 191;
              {
                jjCheckNAddTwoStates(103, 104);
              }
              break;
            case 103:
              if ((0x3ff000000000000L & l) == 0L) break;
              if (kind > 191) kind = 191;
              {
                jjCheckNAddTwoStates(103, 104);
              }
              break;
            case 105:
              if (curChar != 48) break;
              if (kind > 191) kind = 191;
              {
                jjCheckNAddStates(62, 64);
              }
              break;
            case 107:
              if ((0x3ff000000000000L & l) == 0L) break;
              if (kind > 191) kind = 191;
              {
                jjCheckNAddTwoStates(107, 104);
              }
              break;
            case 108:
              if ((0xff000000000000L & l) == 0L) break;
              if (kind > 191) kind = 191;
              {
                jjCheckNAddTwoStates(108, 104);
              }
              break;
            case 109:
              if (curChar == 46) jjstateSet[jjnewStateCnt++] = 100;
              break;
            case 110:
              if ((0x3ff000000000000L & l) != 0L) {
                jjCheckNAddStates(65, 67);
              }
              break;
            case 112:
              if (curChar == 46) {
                jjCheckNAddStates(68, 70);
              }
              break;
            case 113:
              if (curChar == 45) {
                jjCheckNAddTwoStates(114, 117);
              }
              break;
            case 114:
              if ((0x3fe000000000000L & l) == 0L) break;
              if (kind > 192) kind = 192;
              {
                jjCheckNAddTwoStates(115, 116);
              }
              break;
            case 115:
              if ((0x3ff000000000000L & l) == 0L) break;
              if (kind > 192) kind = 192;
              {
                jjCheckNAddTwoStates(115, 116);
              }
              break;
            case 117:
              if (curChar != 48) break;
              if (kind > 192) kind = 192;
              {
                jjCheckNAddStates(71, 73);
              }
              break;
            case 119:
              if ((0x3ff000000000000L & l) == 0L) break;
              if (kind > 192) kind = 192;
              {
                jjCheckNAddTwoStates(119, 116);
              }
              break;
            case 120:
              if ((0xff000000000000L & l) == 0L) break;
              if (kind > 192) kind = 192;
              {
                jjCheckNAddTwoStates(120, 116);
              }
              break;
            case 121:
              if (curChar == 46) jjstateSet[jjnewStateCnt++] = 112;
              break;
            case 122:
              if (curChar == 46) jjstateSet[jjnewStateCnt++] = 121;
              break;
            case 123:
              if (curChar == 39) {
                jjCheckNAddStates(11, 15);
              }
              break;
            case 124:
              if ((0xffffff7fffffdbffL & l) != 0L) {
                jjCheckNAdd(125);
              }
              break;
            case 125:
              if (curChar == 39 && kind > 189) kind = 189;
              break;
            case 127:
              if ((0x808400000000L & l) != 0L) {
                jjCheckNAdd(125);
              }
              break;
            case 128:
              if ((0xff000000000000L & l) != 0L) {
                jjCheckNAddTwoStates(129, 125);
              }
              break;
            case 129:
              if ((0xff000000000000L & l) != 0L) {
                jjCheckNAdd(125);
              }
              break;
            case 130:
              if ((0xf000000000000L & l) != 0L) jjstateSet[jjnewStateCnt++] = 131;
              break;
            case 131:
              if ((0xff000000000000L & l) != 0L) {
                jjCheckNAdd(129);
              }
              break;
            case 132:
              if ((0xffffff7fffffdbffL & l) != 0L) {
                jjCheckNAddStates(74, 76);
              }
              break;
            case 134:
              if ((0x808400000000L & l) != 0L) {
                jjCheckNAddStates(74, 76);
              }
              break;
            case 135:
              if (curChar == 39 && kind > 190) kind = 190;
              break;
            case 136:
              if ((0xff000000000000L & l) != 0L) {
                jjCheckNAddStates(77, 80);
              }
              break;
            case 137:
              if ((0xff000000000000L & l) != 0L) {
                jjCheckNAddStates(74, 76);
              }
              break;
            case 138:
              if ((0xf000000000000L & l) != 0L) jjstateSet[jjnewStateCnt++] = 139;
              break;
            case 139:
              if ((0xff000000000000L & l) != 0L) {
                jjCheckNAdd(137);
              }
              break;
            case 140:
              if (curChar == 45) {
                jjAddStates(7, 10);
              }
              break;
            case 141:
              if ((0x3fe000000000000L & l) != 0L) {
                jjCheckNAddStates(56, 58);
              }
              break;
            case 142:
              if ((0x3fe000000000000L & l) != 0L) {
                jjCheckNAddStates(65, 67);
              }
              break;
            case 143:
              if (curChar == 48) {
                jjCheckNAddStates(81, 84);
              }
              break;
            case 145:
              if ((0x3ff000000000000L & l) != 0L) {
                jjCheckNAddStates(85, 87);
              }
              break;
            case 146:
              if ((0xff000000000000L & l) != 0L) {
                jjCheckNAddStates(88, 90);
              }
              break;
            case 147:
              if (curChar == 48) {
                jjCheckNAddStates(91, 94);
              }
              break;
            case 149:
              if ((0x3ff000000000000L & l) != 0L) {
                jjCheckNAddStates(95, 97);
              }
              break;
            case 150:
              if ((0xff000000000000L & l) != 0L) {
                jjCheckNAddStates(98, 100);
              }
              break;
            case 153:
              if (curChar == 58 && kind > 263) kind = 263;
              break;
            case 157:
              if (curChar == 58) {
                jjAddStates(101, 102);
              }
              break;
            case 159:
              if (curChar != 36) break;
              if (kind > 264) kind = 264;
              {
                jjCheckNAddTwoStates(160, 161);
              }
              break;
            case 160:
              if ((0x3ff000000000000L & l) == 0L) break;
              if (kind > 264) kind = 264;
              {
                jjCheckNAddTwoStates(160, 161);
              }
              break;
            case 161:
              if ((0x600000000000L & l) != 0L) jjstateSet[jjnewStateCnt++] = 162;
              break;
            case 162:
              if (curChar != 36) break;
              if (kind > 264) kind = 264;
              {
                jjCheckNAddTwoStates(161, 163);
              }
              break;
            case 163:
              if ((0x3ff000000000000L & l) == 0L) break;
              if (kind > 264) kind = 264;
              {
                jjCheckNAddTwoStates(161, 163);
              }
              break;
            case 189:
              if (curChar == 58) {
                jjAddStates(103, 104);
              }
              break;
            case 191:
              if (curChar != 36) break;
              if (kind > 265) kind = 265;
              {
                jjCheckNAddTwoStates(192, 193);
              }
              break;
            case 192:
              if ((0x3ff000000000000L & l) == 0L) break;
              if (kind > 265) kind = 265;
              {
                jjCheckNAddTwoStates(192, 193);
              }
              break;
            case 193:
              if ((0x600000000000L & l) != 0L) jjstateSet[jjnewStateCnt++] = 194;
              break;
            case 194:
              if (curChar != 36) break;
              if (kind > 265) kind = 265;
              {
                jjCheckNAddTwoStates(193, 195);
              }
              break;
            case 195:
              if ((0x3ff000000000000L & l) == 0L) break;
              if (kind > 265) kind = 265;
              {
                jjCheckNAddTwoStates(193, 195);
              }
              break;
            case 224:
              if (curChar == 58) {
                jjAddStates(105, 106);
              }
              break;
            case 226:
              if (curChar != 36) break;
              if (kind > 266) kind = 266;
              {
                jjCheckNAddTwoStates(227, 228);
              }
              break;
            case 227:
              if ((0x3ff000000000000L & l) == 0L) break;
              if (kind > 266) kind = 266;
              {
                jjCheckNAddTwoStates(227, 228);
              }
              break;
            case 228:
              if ((0x600000000000L & l) != 0L) jjstateSet[jjnewStateCnt++] = 229;
              break;
            case 229:
              if (curChar != 36) break;
              if (kind > 266) kind = 266;
              {
                jjCheckNAddTwoStates(228, 230);
              }
              break;
            case 230:
              if ((0x3ff000000000000L & l) == 0L) break;
              if (kind > 266) kind = 266;
              {
                jjCheckNAddTwoStates(228, 230);
              }
              break;
            case 262:
              if (curChar == 58) jjstateSet[jjnewStateCnt++] = 263;
              break;
            case 263:
              if (curChar != 36) break;
              if (kind > 267) kind = 267;
              {
                jjCheckNAdd(264);
              }
              break;
            case 264:
              if ((0x3ff000000000000L & l) == 0L) break;
              if (kind > 267) kind = 267;
              {
                jjCheckNAdd(264);
              }
              break;
            case 271:
              if (curChar == 58) {
                jjAddStates(107, 108);
              }
              break;
            case 272:
              if ((0x3fe000000000000L & l) == 0L) break;
              if (kind > 268) kind = 268;
              {
                jjCheckNAddTwoStates(273, 274);
              }
              break;
            case 273:
              if ((0x3ff000000000000L & l) == 0L) break;
              if (kind > 268) kind = 268;
              {
                jjCheckNAddTwoStates(273, 274);
              }
              break;
            case 275:
              if (curChar != 48) break;
              if (kind > 268) kind = 268;
              {
                jjCheckNAddStates(109, 111);
              }
              break;
            case 277:
              if ((0x3ff000000000000L & l) == 0L) break;
              if (kind > 268) kind = 268;
              {
                jjCheckNAddTwoStates(277, 274);
              }
              break;
            case 278:
              if ((0xff000000000000L & l) == 0L) break;
              if (kind > 268) kind = 268;
              {
                jjCheckNAddTwoStates(278, 274);
              }
              break;
            case 284:
              if (curChar != 48) break;
              if (kind > 180) kind = 180;
              {
                jjCheckNAddStates(27, 39);
              }
              break;
            case 286:
              if ((0x3ff000000000000L & l) == 0L) break;
              if (kind > 180) kind = 180;
              {
                jjCheckNAddTwoStates(286, 97);
              }
              break;
            case 287:
              if ((0xff000000000000L & l) == 0L) break;
              if (kind > 180) kind = 180;
              {
                jjCheckNAddTwoStates(287, 97);
              }
              break;
            case 289:
              if ((0x3ff000000000000L & l) != 0L) {
                jjAddStates(112, 113);
              }
              break;
            case 290:
              if (curChar == 46) {
                jjCheckNAdd(291);
              }
              break;
            case 291:
              if ((0x3ff000000000000L & l) != 0L) {
                jjCheckNAddTwoStates(291, 292);
              }
              break;
            case 293:
              if ((0x280000000000L & l) != 0L) {
                jjCheckNAdd(294);
              }
              break;
            case 294:
              if ((0x3ff000000000000L & l) == 0L) break;
              if (kind > 184) kind = 184;
              {
                jjCheckNAddTwoStates(294, 9);
              }
              break;
            case 296:
              if ((0x3ff000000000000L & l) != 0L) {
                jjCheckNAddStates(114, 116);
              }
              break;
            case 297:
              if (curChar == 46) {
                jjCheckNAdd(298);
              }
              break;
            case 299:
              if ((0x280000000000L & l) != 0L) {
                jjCheckNAdd(300);
              }
              break;
            case 300:
              if ((0x3ff000000000000L & l) == 0L) break;
              if (kind > 184) kind = 184;
              {
                jjCheckNAddTwoStates(300, 9);
              }
              break;
            default:
              break;
          }
        } while (i != startsAt);
      } else if (curChar < 128) {
        long l = 1L << (curChar & 077);
        do {
          switch (jjstateSet[--i]) {
            case 3:
              if ((0x7fffffe87fffffeL & l) != 0L) {
                if (kind > 261) kind = 261;
                {
                  jjCheckNAdd(20);
                }
              } else if (curChar == 64) {
                jjAddStates(117, 125);
              } else if (curChar == 96) {
                jjCheckNAddTwoStates(22, 26);
              }
              if ((0x800000008L & l) != 0L) {
                jjAddStates(126, 127);
              } else if ((0x20000000200L & l) != 0L) {
                jjAddStates(128, 131);
              } else if ((0x200000002000L & l) != 0L) jjstateSet[jjnewStateCnt++] = 36;
              break;
            case 1:
              if (kind > 7) kind = 7;
              break;
            case 6:
              if ((0x2000000020L & l) != 0L) {
                jjAddStates(132, 133);
              }
              break;
            case 9:
              if ((0x5000000050L & l) != 0L && kind > 184) kind = 184;
              break;
            case 11:
              if ((0xffffffffefffffffL & l) != 0L) {
                jjCheckNAddStates(16, 18);
              }
              break;
            case 12:
              if (curChar == 92) {
                jjAddStates(134, 136);
              }
              break;
            case 13:
              if ((0x14404410000000L & l) != 0L) {
                jjCheckNAddStates(16, 18);
              }
              break;
            case 19:
            case 20:
              if ((0x7fffffe87fffffeL & l) == 0L) break;
              if (kind > 261) kind = 261;
              {
                jjCheckNAdd(20);
              }
              break;
            case 21:
              if (curChar == 96) {
                jjCheckNAddTwoStates(22, 26);
              }
              break;
            case 22:
              if ((0xfffffffeffffffffL & l) != 0L) {
                jjCheckNAddStates(47, 49);
              }
              break;
            case 23:
              if (curChar == 96) {
                jjCheckNAddStates(47, 49);
              }
              break;
            case 24:
            case 26:
              if (curChar == 92) {
                jjCheckNAdd(23);
              }
              break;
            case 25:
              if (curChar == 96 && kind > 262) kind = 262;
              break;
            case 28:
            case 29:
              if ((0x7fffffe87fffffeL & l) == 0L) break;
              if (kind > 269) kind = 269;
              {
                jjCheckNAdd(29);
              }
              break;
            case 30:
              if ((0x200000002L & l) != 0L) jjstateSet[jjnewStateCnt++] = 27;
              break;
            case 31:
              if ((0x10000000100000L & l) != 0L) jjstateSet[jjnewStateCnt++] = 30;
              break;
            case 32:
              if ((0x200000002L & l) != 0L) jjstateSet[jjnewStateCnt++] = 31;
              break;
            case 33:
              if ((0x1000000010L & l) != 0L) jjstateSet[jjnewStateCnt++] = 32;
              break;
            case 34:
              if ((0x200000002L & l) != 0L) jjstateSet[jjnewStateCnt++] = 33;
              break;
            case 35:
              if ((0x10000000100000L & l) != 0L) jjstateSet[jjnewStateCnt++] = 34;
              break;
            case 36:
              if ((0x2000000020L & l) != 0L) jjstateSet[jjnewStateCnt++] = 35;
              break;
            case 37:
              if ((0x200000002000L & l) != 0L) jjstateSet[jjnewStateCnt++] = 36;
              break;
            case 40:
              if ((0x2000000020L & l) != 0L) {
                jjAddStates(137, 138);
              }
              break;
            case 44:
              if ((0x2000000020L & l) != 0L) {
                jjAddStates(139, 140);
              }
              break;
            case 50:
              if ((0x2000000020L & l) != 0L) {
                jjAddStates(141, 142);
              }
              break;
            case 53:
              if (curChar == 64) {
                jjAddStates(117, 125);
              }
              break;
            case 54:
              if ((0x1000000010L & l) != 0L && kind > 167) kind = 167;
              break;
            case 55:
            case 79:
              if ((0x20000000200L & l) != 0L) {
                jjCheckNAdd(54);
              }
              break;
            case 56:
              if ((0x4000000040000L & l) != 0L) jjstateSet[jjnewStateCnt++] = 55;
              break;
            case 57:
              if ((0x8000000080000L & l) != 0L && kind > 167) kind = 167;
              break;
            case 58:
              if ((0x8000000080000L & l) != 0L) {
                jjCheckNAdd(57);
              }
              break;
            case 59:
              if ((0x200000002L & l) != 0L) jjstateSet[jjnewStateCnt++] = 58;
              break;
            case 60:
              if ((0x100000001000L & l) != 0L) jjstateSet[jjnewStateCnt++] = 59;
              break;
            case 61:
              if ((0x800000008L & l) != 0L) jjstateSet[jjnewStateCnt++] = 60;
              break;
            case 62:
              if ((0x400000004000L & l) != 0L && kind > 167) kind = 167;
              break;
            case 63:
              if ((0x800000008000L & l) != 0L) jjstateSet[jjnewStateCnt++] = 62;
              break;
            case 64:
              if ((0x20000000200L & l) != 0L) jjstateSet[jjnewStateCnt++] = 63;
              break;
            case 65:
              if ((0x8000000080000L & l) != 0L) jjstateSet[jjnewStateCnt++] = 64;
              break;
            case 66:
              if ((0x4000000040000L & l) != 0L) jjstateSet[jjnewStateCnt++] = 65;
              break;
            case 67:
              if ((0x2000000020L & l) != 0L) jjstateSet[jjnewStateCnt++] = 66;
              break;
            case 68:
              if ((0x40000000400000L & l) != 0L) jjstateSet[jjnewStateCnt++] = 67;
              break;
            case 69:
              if ((0x2000000020L & l) != 0L && kind > 167) kind = 167;
              break;
            case 70:
              if ((0x400000004000000L & l) != 0L) {
                jjCheckNAdd(69);
              }
              break;
            case 71:
              if ((0x20000000200L & l) != 0L) jjstateSet[jjnewStateCnt++] = 70;
              break;
            case 72:
              if ((0x8000000080000L & l) != 0L) jjstateSet[jjnewStateCnt++] = 71;
              break;
            case 73:
              if ((0x1000000010000L & l) != 0L) {
                jjCheckNAdd(69);
              }
              break;
            case 74:
              if ((0x200000002000000L & l) != 0L) jjstateSet[jjnewStateCnt++] = 73;
              break;
            case 75:
              if ((0x10000000100000L & l) != 0L) jjstateSet[jjnewStateCnt++] = 74;
              break;
            case 76:
              if ((0x80000000800000L & l) != 0L && kind > 167) kind = 167;
              break;
            case 77:
              if ((0x200000002L & l) != 0L) jjstateSet[jjnewStateCnt++] = 76;
              break;
            case 78:
              if ((0x4000000040000L & l) != 0L) jjstateSet[jjnewStateCnt++] = 77;
              break;
            case 80:
              if (curChar == 95) jjstateSet[jjnewStateCnt++] = 79;
              break;
            case 81:
              if ((0x1000000010L & l) != 0L) jjstateSet[jjnewStateCnt++] = 80;
              break;
            case 82:
              if ((0x20000000200L & l) != 0L) jjstateSet[jjnewStateCnt++] = 81;
              break;
            case 83:
              if ((0x4000000040000L & l) != 0L) jjstateSet[jjnewStateCnt++] = 82;
              break;
            case 84:
              if ((0x800000008000L & l) != 0L) {
                jjCheckNAdd(57);
              }
              break;
            case 85:
              if ((0x1000000010000L & l) != 0L) jjstateSet[jjnewStateCnt++] = 84;
              break;
            case 86:
              if (curChar == 95) jjstateSet[jjnewStateCnt++] = 85;
              break;
            case 87:
              if ((0x1000000010L & l) != 0L) jjstateSet[jjnewStateCnt++] = 86;
              break;
            case 88:
              if ((0x20000000200L & l) != 0L) jjstateSet[jjnewStateCnt++] = 87;
              break;
            case 89:
              if ((0x4000000040000L & l) != 0L) jjstateSet[jjnewStateCnt++] = 88;
              break;
            case 90:
              if ((0x1000000010L & l) != 0L) {
                jjCheckNAdd(57);
              }
              break;
            case 91:
              if ((0x100000001000L & l) != 0L) jjstateSet[jjnewStateCnt++] = 90;
              break;
            case 92:
              if ((0x2000000020L & l) != 0L) jjstateSet[jjnewStateCnt++] = 91;
              break;
            case 93:
              if ((0x20000000200L & l) != 0L) jjstateSet[jjnewStateCnt++] = 92;
              break;
            case 94:
              if ((0x4000000040L & l) != 0L) jjstateSet[jjnewStateCnt++] = 93;
              break;
            case 97:
              if ((0x100000001000L & l) != 0L && kind > 180) kind = 180;
              break;
            case 99:
              if ((0x100000001000L & l) != 0L) {
                jjCheckNAdd(109);
              }
              break;
            case 104:
              if ((0x100000001000L & l) != 0L && kind > 191) kind = 191;
              break;
            case 106:
              if ((0x100000001000000L & l) != 0L) {
                jjCheckNAdd(107);
              }
              break;
            case 107:
              if ((0x7e0000007eL & l) == 0L) break;
              if (kind > 191) kind = 191;
              {
                jjCheckNAddTwoStates(107, 104);
              }
              break;
            case 111:
              if ((0x100000001000L & l) != 0L) {
                jjCheckNAdd(122);
              }
              break;
            case 116:
              if ((0x100000001000L & l) != 0L && kind > 192) kind = 192;
              break;
            case 118:
              if ((0x100000001000000L & l) != 0L) {
                jjCheckNAdd(119);
              }
              break;
            case 119:
              if ((0x7e0000007eL & l) == 0L) break;
              if (kind > 192) kind = 192;
              {
                jjCheckNAddTwoStates(119, 116);
              }
              break;
            case 124:
              if ((0xffffffffefffffffL & l) != 0L) {
                jjCheckNAdd(125);
              }
              break;
            case 126:
              if (curChar == 92) {
                jjAddStates(143, 145);
              }
              break;
            case 127:
              if ((0x14404410000000L & l) != 0L) {
                jjCheckNAdd(125);
              }
              break;
            case 132:
              if ((0xffffffffefffffffL & l) != 0L) {
                jjCheckNAddStates(74, 76);
              }
              break;
            case 133:
              if (curChar == 92) {
                jjAddStates(146, 148);
              }
              break;
            case 134:
              if ((0x14404410000000L & l) != 0L) {
                jjCheckNAddStates(74, 76);
              }
              break;
            case 144:
              if ((0x100000001000000L & l) != 0L) {
                jjCheckNAdd(145);
              }
              break;
            case 145:
              if ((0x7e0000007eL & l) != 0L) {
                jjCheckNAddStates(85, 87);
              }
              break;
            case 148:
              if ((0x100000001000000L & l) != 0L) {
                jjCheckNAdd(149);
              }
              break;
            case 149:
              if ((0x7e0000007eL & l) != 0L) {
                jjCheckNAddStates(95, 97);
              }
              break;
            case 151:
              if ((0x20000000200L & l) != 0L) {
                jjAddStates(128, 131);
              }
              break;
            case 152:
              if ((0x100000001000000L & l) != 0L) jjstateSet[jjnewStateCnt++] = 153;
              break;
            case 154:
              if ((0x2000000020L & l) != 0L) jjstateSet[jjnewStateCnt++] = 152;
              break;
            case 155:
              if ((0x1000000010L & l) != 0L) jjstateSet[jjnewStateCnt++] = 154;
              break;
            case 156:
              if ((0x400000004000L & l) != 0L) jjstateSet[jjnewStateCnt++] = 155;
              break;
            case 158:
              if (curChar == 95) jjstateSet[jjnewStateCnt++] = 159;
              break;
            case 159:
            case 160:
              if ((0x7fffffe87fffffeL & l) == 0L) break;
              if (kind > 264) kind = 264;
              {
                jjCheckNAddTwoStates(160, 161);
              }
              break;
            case 162:
            case 163:
              if ((0x7fffffe87fffffeL & l) == 0L) break;
              if (kind > 264) kind = 264;
              {
                jjCheckNAddTwoStates(161, 163);
              }
              break;
            case 164:
              if (curChar == 95) jjstateSet[jjnewStateCnt++] = 158;
              break;
            case 165:
              if (curChar == 95) jjstateSet[jjnewStateCnt++] = 164;
              break;
            case 166:
              if (curChar == 64) jjstateSet[jjnewStateCnt++] = 165;
              break;
            case 167:
              if ((0x1000000010000L & l) != 0L) jjstateSet[jjnewStateCnt++] = 166;
              break;
            case 168:
              if ((0x200000002L & l) != 0L) jjstateSet[jjnewStateCnt++] = 167;
              break;
            case 169:
              if ((0x200000002000L & l) != 0L) jjstateSet[jjnewStateCnt++] = 168;
              break;
            case 170:
              if ((0x1000000010L & l) != 0L) jjstateSet[jjnewStateCnt++] = 169;
              break;
            case 171:
              if ((0x4000000040000L & l) != 0L) jjstateSet[jjnewStateCnt++] = 170;
              break;
            case 172:
              if ((0x800000008000L & l) != 0L) jjstateSet[jjnewStateCnt++] = 171;
              break;
            case 173:
              if ((0x800000008L & l) != 0L) jjstateSet[jjnewStateCnt++] = 172;
              break;
            case 174:
              if ((0x2000000020L & l) != 0L) jjstateSet[jjnewStateCnt++] = 173;
              break;
            case 175:
              if ((0x4000000040000L & l) != 0L) jjstateSet[jjnewStateCnt++] = 174;
              break;
            case 176:
              if (curChar == 64) jjstateSet[jjnewStateCnt++] = 175;
              break;
            case 177:
              if (curChar == 95) jjstateSet[jjnewStateCnt++] = 176;
              break;
            case 178:
              if (curChar == 95) jjstateSet[jjnewStateCnt++] = 177;
              break;
            case 179:
              if ((0x8000000080000L & l) != 0L) jjstateSet[jjnewStateCnt++] = 157;
              break;
            case 180:
              if ((0x2000000020L & l) != 0L) jjstateSet[jjnewStateCnt++] = 179;
              break;
            case 181:
              if ((0x20000000200000L & l) != 0L) jjstateSet[jjnewStateCnt++] = 180;
              break;
            case 182:
              if ((0x100000001000L & l) != 0L) jjstateSet[jjnewStateCnt++] = 181;
              break;
            case 183:
              if ((0x200000002L & l) != 0L) jjstateSet[jjnewStateCnt++] = 182;
              break;
            case 184:
              if ((0x40000000400000L & l) != 0L) jjstateSet[jjnewStateCnt++] = 183;
              break;
            case 185:
              if ((0x100000001000000L & l) != 0L) jjstateSet[jjnewStateCnt++] = 184;
              break;
            case 186:
              if ((0x2000000020L & l) != 0L) jjstateSet[jjnewStateCnt++] = 185;
              break;
            case 187:
              if ((0x1000000010L & l) != 0L) jjstateSet[jjnewStateCnt++] = 186;
              break;
            case 188:
              if ((0x400000004000L & l) != 0L) jjstateSet[jjnewStateCnt++] = 187;
              break;
            case 190:
              if (curChar == 95) jjstateSet[jjnewStateCnt++] = 191;
              break;
            case 191:
            case 192:
              if ((0x7fffffe87fffffeL & l) == 0L) break;
              if (kind > 265) kind = 265;
              {
                jjCheckNAddTwoStates(192, 193);
              }
              break;
            case 194:
            case 195:
              if ((0x7fffffe87fffffeL & l) == 0L) break;
              if (kind > 265) kind = 265;
              {
                jjCheckNAddTwoStates(193, 195);
              }
              break;
            case 196:
              if (curChar == 95) jjstateSet[jjnewStateCnt++] = 190;
              break;
            case 197:
              if (curChar == 95) jjstateSet[jjnewStateCnt++] = 196;
              break;
            case 198:
              if (curChar == 64) jjstateSet[jjnewStateCnt++] = 197;
              break;
            case 199:
              if ((0x1000000010000L & l) != 0L) jjstateSet[jjnewStateCnt++] = 198;
              break;
            case 200:
              if ((0x200000002L & l) != 0L) jjstateSet[jjnewStateCnt++] = 199;
              break;
            case 201:
              if ((0x200000002000L & l) != 0L) jjstateSet[jjnewStateCnt++] = 200;
              break;
            case 202:
              if ((0x1000000010L & l) != 0L) jjstateSet[jjnewStateCnt++] = 201;
              break;
            case 203:
              if ((0x4000000040000L & l) != 0L) jjstateSet[jjnewStateCnt++] = 202;
              break;
            case 204:
              if ((0x800000008000L & l) != 0L) jjstateSet[jjnewStateCnt++] = 203;
              break;
            case 205:
              if ((0x800000008L & l) != 0L) jjstateSet[jjnewStateCnt++] = 204;
              break;
            case 206:
              if ((0x2000000020L & l) != 0L) jjstateSet[jjnewStateCnt++] = 205;
              break;
            case 207:
              if ((0x4000000040000L & l) != 0L) jjstateSet[jjnewStateCnt++] = 206;
              break;
            case 208:
              if (curChar == 64) jjstateSet[jjnewStateCnt++] = 207;
              break;
            case 209:
              if (curChar == 95) jjstateSet[jjnewStateCnt++] = 208;
              break;
            case 210:
              if (curChar == 95) jjstateSet[jjnewStateCnt++] = 209;
              break;
            case 211:
              if ((0x800000008L & l) != 0L) jjstateSet[jjnewStateCnt++] = 189;
              break;
            case 212:
              if ((0x8000000080000L & l) != 0L) jjstateSet[jjnewStateCnt++] = 211;
              break;
            case 213:
              if ((0x200000002L & l) != 0L) jjstateSet[jjnewStateCnt++] = 212;
              break;
            case 214:
              if ((0x8000000080000L & l) != 0L) jjstateSet[jjnewStateCnt++] = 213;
              break;
            case 215:
              if ((0x2000000020L & l) != 0L) jjstateSet[jjnewStateCnt++] = 214;
              break;
            case 216:
              if ((0x20000000200000L & l) != 0L) jjstateSet[jjnewStateCnt++] = 215;
              break;
            case 217:
              if ((0x100000001000L & l) != 0L) jjstateSet[jjnewStateCnt++] = 216;
              break;
            case 218:
              if ((0x200000002L & l) != 0L) jjstateSet[jjnewStateCnt++] = 217;
              break;
            case 219:
              if ((0x40000000400000L & l) != 0L) jjstateSet[jjnewStateCnt++] = 218;
              break;
            case 220:
              if ((0x100000001000000L & l) != 0L) jjstateSet[jjnewStateCnt++] = 219;
              break;
            case 221:
              if ((0x2000000020L & l) != 0L) jjstateSet[jjnewStateCnt++] = 220;
              break;
            case 222:
              if ((0x1000000010L & l) != 0L) jjstateSet[jjnewStateCnt++] = 221;
              break;
            case 223:
              if ((0x400000004000L & l) != 0L) jjstateSet[jjnewStateCnt++] = 222;
              break;
            case 225:
              if (curChar == 95) jjstateSet[jjnewStateCnt++] = 226;
              break;
            case 226:
            case 227:
              if ((0x7fffffe87fffffeL & l) == 0L) break;
              if (kind > 266) kind = 266;
              {
                jjCheckNAddTwoStates(227, 228);
              }
              break;
            case 229:
            case 230:
              if ((0x7fffffe87fffffeL & l) == 0L) break;
              if (kind > 266) kind = 266;
              {
                jjCheckNAddTwoStates(228, 230);
              }
              break;
            case 231:
              if (curChar == 95) jjstateSet[jjnewStateCnt++] = 225;
              break;
            case 232:
              if (curChar == 95) jjstateSet[jjnewStateCnt++] = 231;
              break;
            case 233:
              if (curChar == 64) jjstateSet[jjnewStateCnt++] = 232;
              break;
            case 234:
              if ((0x1000000010000L & l) != 0L) jjstateSet[jjnewStateCnt++] = 233;
              break;
            case 235:
              if ((0x200000002L & l) != 0L) jjstateSet[jjnewStateCnt++] = 234;
              break;
            case 236:
              if ((0x200000002000L & l) != 0L) jjstateSet[jjnewStateCnt++] = 235;
              break;
            case 237:
              if ((0x1000000010L & l) != 0L) jjstateSet[jjnewStateCnt++] = 236;
              break;
            case 238:
              if ((0x4000000040000L & l) != 0L) jjstateSet[jjnewStateCnt++] = 237;
              break;
            case 239:
              if ((0x800000008000L & l) != 0L) jjstateSet[jjnewStateCnt++] = 238;
              break;
            case 240:
              if ((0x800000008L & l) != 0L) jjstateSet[jjnewStateCnt++] = 239;
              break;
            case 241:
              if ((0x2000000020L & l) != 0L) jjstateSet[jjnewStateCnt++] = 240;
              break;
            case 242:
              if ((0x4000000040000L & l) != 0L) jjstateSet[jjnewStateCnt++] = 241;
              break;
            case 243:
              if (curChar == 64) jjstateSet[jjnewStateCnt++] = 242;
              break;
            case 244:
              if (curChar == 95) jjstateSet[jjnewStateCnt++] = 243;
              break;
            case 245:
              if (curChar == 95) jjstateSet[jjnewStateCnt++] = 244;
              break;
            case 246:
              if ((0x800000008L & l) != 0L) jjstateSet[jjnewStateCnt++] = 224;
              break;
            case 247:
              if ((0x8000000080000L & l) != 0L) jjstateSet[jjnewStateCnt++] = 246;
              break;
            case 248:
              if ((0x2000000020L & l) != 0L) jjstateSet[jjnewStateCnt++] = 247;
              break;
            case 249:
              if ((0x1000000010L & l) != 0L) jjstateSet[jjnewStateCnt++] = 248;
              break;
            case 250:
              if ((0x8000000080000L & l) != 0L) jjstateSet[jjnewStateCnt++] = 249;
              break;
            case 251:
              if ((0x2000000020L & l) != 0L) jjstateSet[jjnewStateCnt++] = 250;
              break;
            case 252:
              if ((0x20000000200000L & l) != 0L) jjstateSet[jjnewStateCnt++] = 251;
              break;
            case 253:
              if ((0x100000001000L & l) != 0L) jjstateSet[jjnewStateCnt++] = 252;
              break;
            case 254:
              if ((0x200000002L & l) != 0L) jjstateSet[jjnewStateCnt++] = 253;
              break;
            case 255:
              if ((0x40000000400000L & l) != 0L) jjstateSet[jjnewStateCnt++] = 254;
              break;
            case 256:
              if ((0x100000001000000L & l) != 0L) jjstateSet[jjnewStateCnt++] = 255;
              break;
            case 257:
              if ((0x2000000020L & l) != 0L) jjstateSet[jjnewStateCnt++] = 256;
              break;
            case 258:
              if ((0x1000000010L & l) != 0L) jjstateSet[jjnewStateCnt++] = 257;
              break;
            case 259:
              if ((0x400000004000L & l) != 0L) jjstateSet[jjnewStateCnt++] = 258;
              break;
            case 260:
              if ((0x800000008L & l) != 0L) {
                jjAddStates(126, 127);
              }
              break;
            case 261:
              if ((0x4000000040000L & l) != 0L) jjstateSet[jjnewStateCnt++] = 262;
              break;
            case 263:
            case 264:
              if ((0x7fffffe87fffffeL & l) == 0L) break;
              if (kind > 267) kind = 267;
              {
                jjCheckNAdd(264);
              }
              break;
            case 265:
              if ((0x2000000020L & l) != 0L) jjstateSet[jjnewStateCnt++] = 261;
              break;
            case 266:
              if ((0x10000000100000L & l) != 0L) jjstateSet[jjnewStateCnt++] = 265;
              break;
            case 267:
              if ((0x8000000080000L & l) != 0L) jjstateSet[jjnewStateCnt++] = 266;
              break;
            case 268:
              if ((0x20000000200000L & l) != 0L) jjstateSet[jjnewStateCnt++] = 267;
              break;
            case 269:
              if ((0x100000001000L & l) != 0L) jjstateSet[jjnewStateCnt++] = 268;
              break;
            case 270:
              if ((0x4000000040000L & l) != 0L) jjstateSet[jjnewStateCnt++] = 271;
              break;
            case 274:
              if ((0x100000001000L & l) != 0L && kind > 268) kind = 268;
              break;
            case 276:
              if ((0x100000001000000L & l) != 0L) {
                jjCheckNAdd(277);
              }
              break;
            case 277:
              if ((0x7e0000007eL & l) == 0L) break;
              if (kind > 268) kind = 268;
              {
                jjCheckNAddTwoStates(277, 274);
              }
              break;
            case 279:
              if ((0x2000000020L & l) != 0L) jjstateSet[jjnewStateCnt++] = 270;
              break;
            case 280:
              if ((0x10000000100000L & l) != 0L) jjstateSet[jjnewStateCnt++] = 279;
              break;
            case 281:
              if ((0x8000000080000L & l) != 0L) jjstateSet[jjnewStateCnt++] = 280;
              break;
            case 282:
              if ((0x20000000200000L & l) != 0L) jjstateSet[jjnewStateCnt++] = 281;
              break;
            case 283:
              if ((0x100000001000L & l) != 0L) jjstateSet[jjnewStateCnt++] = 282;
              break;
            case 285:
              if ((0x100000001000000L & l) != 0L) {
                jjCheckNAdd(286);
              }
              break;
            case 286:
              if ((0x7e0000007eL & l) == 0L) break;
              if (kind > 180) kind = 180;
              {
                jjCheckNAddTwoStates(286, 97);
              }
              break;
            case 288:
              if ((0x100000001000000L & l) != 0L) {
                jjCheckNAddTwoStates(289, 290);
              }
              break;
            case 289:
              if ((0x7e0000007eL & l) != 0L) {
                jjCheckNAddTwoStates(289, 290);
              }
              break;
            case 291:
              if ((0x7e0000007eL & l) != 0L) {
                jjAddStates(149, 150);
              }
              break;
            case 292:
              if ((0x1000000010000L & l) != 0L) {
                jjAddStates(151, 152);
              }
              break;
            case 295:
              if ((0x100000001000000L & l) != 0L) {
                jjCheckNAdd(296);
              }
              break;
            case 296:
              if ((0x7e0000007eL & l) != 0L) {
                jjCheckNAddStates(114, 116);
              }
              break;
            case 298:
              if ((0x1000000010000L & l) != 0L) {
                jjAddStates(153, 154);
              }
              break;
            default:
              break;
          }
        } while (i != startsAt);
      } else {
        int hiByte = (curChar >> 8);
        int i1 = hiByte >> 6;
        long l1 = 1L << (hiByte & 077);
        int i2 = (curChar & 0xff) >> 6;
        long l2 = 1L << (curChar & 077);
        do {
          switch (jjstateSet[--i]) {
            case 1:
              if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 7) kind = 7;
              break;
            case 11:
              if (jjCanMove_0(hiByte, i1, i2, l1, l2)) {
                jjAddStates(16, 18);
              }
              break;
            case 22:
              if (jjCanMove_0(hiByte, i1, i2, l1, l2)) {
                jjAddStates(47, 49);
              }
              break;
            case 124:
              if (jjCanMove_0(hiByte, i1, i2, l1, l2)) jjstateSet[jjnewStateCnt++] = 125;
              break;
            case 132:
              if (jjCanMove_0(hiByte, i1, i2, l1, l2)) {
                jjAddStates(74, 76);
              }
              break;
            default:
              if (i1 == 0 || l1 == 0 || i2 == 0 || l2 == 0) break;
              else break;
          }
        } while (i != startsAt);
      }
      if (kind != 0x7fffffff) {
        jjmatchedKind = kind;
        jjmatchedPos = curPos;
        kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 301 - (jjnewStateCnt = startsAt))) break;
      try {
        curChar = input_stream.readChar();
      } catch (java.io.IOException e) {
        break;
      }
    }
    if (jjmatchedPos > strPos) return curPos;

    int toRet = Math.max(curPos, seenUpto);

    if (curPos < toRet)
      for (i = toRet - Math.min(curPos, seenUpto); i-- > 0; )
        try {
          curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
          throw new Error("Internal Error : Please send a bug report.");
        }

    if (jjmatchedPos < strPos) {
      jjmatchedKind = strKind;
      jjmatchedPos = strPos;
    } else if (jjmatchedPos == strPos && jjmatchedKind > strKind) jjmatchedKind = strKind;

    return toRet;
  }

  private int jjMoveStringLiteralDfa0_2() {
    switch (curChar) {
      case 42:
        return jjMoveStringLiteralDfa1_2(0x400L);
      default:
        return 1;
    }
  }

  private int jjMoveStringLiteralDfa1_2(long active0) {
    try {
      curChar = input_stream.readChar();
    } catch (java.io.IOException e) {
      return 1;
    }
    switch (curChar) {
      case 47:
        if ((active0 & 0x400L) != 0L) return jjStopAtPos(1, 10);
        break;
      default:
        return 2;
    }
    return 2;
  }

  private int jjMoveStringLiteralDfa0_1() {
    switch (curChar) {
      case 42:
        return jjMoveStringLiteralDfa1_1(0x200L);
      default:
        return 1;
    }
  }

  private int jjMoveStringLiteralDfa1_1(long active0) {
    try {
      curChar = input_stream.readChar();
    } catch (java.io.IOException e) {
      return 1;
    }
    switch (curChar) {
      case 47:
        if ((active0 & 0x200L) != 0L) return jjStopAtPos(1, 9);
        break;
      default:
        return 2;
    }
    return 2;
  }

  /** Token literal values. */
  public static final String[] jjstrLiteralImages = {
    "",
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    "\50",
    "\51",
    "\173",
    "\175",
    "\133",
    "\135",
    "\73",
    "\54",
    "\56",
    "\100",
    "\44",
    "\140",
    "\75",
    "\75\75",
    "\74",
    "\76",
    "\41",
    "\176",
    "\77",
    "\72",
    "\74\75",
    "\76\75",
    "\41\75",
    "\74\76",
    "\174\174",
    "\46\46",
    "\53\53",
    "\55\55",
    "\53",
    "\55",
    "\52",
    "\57",
    "\46",
    "\77\77",
    "\174",
    "\136",
    "\45",
    "\74\74",
    "\53\75",
    "\55\75",
    "\52\75",
    "\57\75",
    "\46\75",
    "\174\75",
    "\136\75",
    "\45\75",
    "\74\74\75",
    "\76\76\75",
    "\76\76\76\75",
    "\76\76",
    "\76\76\76",
    "\56\56\56",
    "\56\56",
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    "\43",
    "\137\137\100\162\145\143\157\162\144\155\141\160\100\137\137\137",
    "\162\157\165\156\144\55\162\157\142\151\156",
    "\55\163\145\162\166\145\162\163",
    "\55\144\142",
    "\55\154\141\164\145\156\143\171",
    "\55\155\145\163\163\141\147\145\163",
    "\55\154\157\143\153\163",
    "\55\141\154\154",
    "\55\157\165\164\160\165\164\75\164\145\170\164",
    "\55\146\157\162\143\145",
    "\55\146\165\154\154",
    "\55\146\165\154\154\137\162\145\160\154\141\143\145",
    "\55\155\145\162\147\145",
  };

  protected Token jjFillToken() {
    final Token t;
    final String curTokenImage;
    final int beginLine;
    final int endLine;
    final int beginColumn;
    final int endColumn;
    String im = jjstrLiteralImages[jjmatchedKind];
    curTokenImage = (im == null) ? input_stream.GetImage() : im;
    beginLine = input_stream.getBeginLine();
    beginColumn = input_stream.getBeginColumn();
    endLine = input_stream.getEndLine();
    endColumn = input_stream.getEndColumn();
    t = Token.newToken(jjmatchedKind, curTokenImage);

    t.beginLine = beginLine;
    t.endLine = endLine;
    t.beginColumn = beginColumn;
    t.endColumn = endColumn;

    return t;
  }

  static final int[] jjnextStates = {
    39, 40, 9, 43, 44, 47, 48, 141, 142, 143, 147, 124, 126, 132, 133, 135,
    11, 12, 14, 96, 97, 98, 99, 109, 110, 111, 122, 285, 287, 97, 288, 295,
    148, 150, 99, 109, 144, 146, 111, 122, 5, 6, 9, 11, 12, 16, 14, 22,
    24, 25, 39, 40, 9, 49, 50, 9, 98, 99, 109, 101, 102, 105, 106, 108,
    104, 110, 111, 122, 113, 114, 117, 118, 120, 116, 132, 133, 135, 132, 133, 137,
    135, 144, 146, 111, 122, 145, 111, 122, 146, 111, 122, 148, 150, 99, 109, 149,
    99, 109, 150, 99, 109, 178, 159, 210, 191, 245, 226, 272, 275, 276, 278, 274,
    289, 290, 296, 297, 298, 56, 61, 68, 72, 75, 78, 83, 89, 94, 269, 283,
    156, 188, 223, 259, 7, 8, 13, 15, 17, 41, 42, 45, 46, 51, 52, 127,
    128, 130, 134, 136, 138, 291, 292, 293, 294, 299, 300,
  };

  private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2) {
    switch (hiByte) {
      case 0:
        return ((jjbitVec2[i2] & l2) != 0L);
      default:
        if ((jjbitVec0[i1] & l1) != 0L) return true;
        return false;
    }
  }

  int curLexState = 0;
  int defaultLexState = 0;
  int jjnewStateCnt;
  int jjround;
  int jjmatchedPos;
  int jjmatchedKind;

  /** Get the next Token. */
  public Token getNextToken() {
    Token specialToken = null;
    Token matchedToken;
    int curPos = 0;

    EOFLoop:
    for (; ; ) {
      try {
        curChar = input_stream.BeginToken();
      } catch (Exception e) {
        jjmatchedKind = 0;
        jjmatchedPos = -1;
        matchedToken = jjFillToken();
        matchedToken.specialToken = specialToken;
        return matchedToken;
      }
      image = jjimage;
      image.setLength(0);
      jjimageLen = 0;

      for (; ; ) {
        switch (curLexState) {
          case 0:
            jjmatchedKind = 0x7fffffff;
            jjmatchedPos = 0;
            curPos = jjMoveStringLiteralDfa0_0();
            break;
          case 1:
            jjmatchedKind = 0x7fffffff;
            jjmatchedPos = 0;
            curPos = jjMoveStringLiteralDfa0_1();
            if (jjmatchedPos == 0 && jjmatchedKind > 11) {
              jjmatchedKind = 11;
            }
            break;
          case 2:
            jjmatchedKind = 0x7fffffff;
            jjmatchedPos = 0;
            curPos = jjMoveStringLiteralDfa0_2();
            if (jjmatchedPos == 0 && jjmatchedKind > 11) {
              jjmatchedKind = 11;
            }
            break;
        }
        if (jjmatchedKind != 0x7fffffff) {
          if (jjmatchedPos + 1 < curPos) input_stream.backup(curPos - jjmatchedPos - 1);
          if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L) {
            matchedToken = jjFillToken();
            matchedToken.specialToken = specialToken;
            if (jjnewLexState[jjmatchedKind] != -1) curLexState = jjnewLexState[jjmatchedKind];
            return matchedToken;
          } else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L) {
            if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L) {
              matchedToken = jjFillToken();
              if (specialToken == null) specialToken = matchedToken;
              else {
                matchedToken.specialToken = specialToken;
                specialToken = (specialToken.next = matchedToken);
              }
              SkipLexicalActions(matchedToken);
            } else SkipLexicalActions(null);
            if (jjnewLexState[jjmatchedKind] != -1) curLexState = jjnewLexState[jjmatchedKind];
            continue EOFLoop;
          }
          MoreLexicalActions();
          if (jjnewLexState[jjmatchedKind] != -1) curLexState = jjnewLexState[jjmatchedKind];
          curPos = 0;
          jjmatchedKind = 0x7fffffff;
          try {
            curChar = input_stream.readChar();
            continue;
          } catch (java.io.IOException e1) {
          }
        }
        int error_line = input_stream.getEndLine();
        int error_column = input_stream.getEndColumn();
        String error_after = null;
        boolean EOFSeen = false;
        try {
          input_stream.readChar();
          input_stream.backup(1);
        } catch (java.io.IOException e1) {
          EOFSeen = true;
          error_after = curPos <= 1 ? "" : input_stream.GetImage();
          if (curChar == '\n' || curChar == '\r') {
            error_line++;
            error_column = 0;
          } else error_column++;
        }
        if (!EOFSeen) {
          input_stream.backup(1);
          error_after = curPos <= 1 ? "" : input_stream.GetImage();
        }
        throw new TokenMgrError(
            EOFSeen,
            curLexState,
            error_line,
            error_column,
            error_after,
            curChar,
            TokenMgrError.LEXICAL_ERROR);
      }
    }
  }

  void SkipLexicalActions(Token matchedToken) {
    switch (jjmatchedKind) {
      default:
        break;
    }
  }

  void MoreLexicalActions() {
    jjimageLen += (lengthOfMatch = jjmatchedPos + 1);
    switch (jjmatchedKind) {
      case 7:
        image.append(input_stream.GetSuffix(jjimageLen));
        jjimageLen = 0;
        input_stream.backup(1);
        break;
      default:
        break;
    }
  }

  void TokenLexicalActions(Token matchedToken) {
    switch (jjmatchedKind) {
      default:
        break;
    }
  }

  private void jjCheckNAdd(int state) {
    if (jjrounds[state] != jjround) {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
    }
  }

  private void jjAddStates(int start, int end) {
    do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
    } while (start++ != end);
  }

  private void jjCheckNAddTwoStates(int state1, int state2) {
    jjCheckNAdd(state1);
    jjCheckNAdd(state2);
  }

  private void jjCheckNAddStates(int start, int end) {
    do {
      jjCheckNAdd(jjnextStates[start]);
    } while (start++ != end);
  }

  /** Constructor. */
  public OrientSqlTokenManager(CharStream stream) {

    input_stream = stream;
  }

  /** Constructor. */
  public OrientSqlTokenManager(CharStream stream, int lexState) {
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Reinitialise parser. */
  public void ReInit(CharStream stream) {

    jjmatchedPos = jjnewStateCnt = 0;
    curLexState = defaultLexState;
    input_stream = stream;
    ReInitRounds();
  }

  private void ReInitRounds() {
    int i;
    jjround = 0x80000001;
    for (i = 301; i-- > 0; ) jjrounds[i] = 0x80000000;
  }

  /** Reinitialise parser. */
  public void ReInit(CharStream stream, int lexState) {

    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Switch to specified lex state. */
  public void SwitchTo(int lexState) {
    if (lexState >= 3 || lexState < 0)
      throw new TokenMgrError(
          "Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.",
          TokenMgrError.INVALID_LEXICAL_STATE);
    else curLexState = lexState;
  }

  /** Lexer state names. */
  public static final String[] lexStateNames = {
    "DEFAULT", "IN_FORMAL_COMMENT", "IN_MULTI_LINE_COMMENT",
  };

  /** Lex State array. */
  public static final int[] jjnewLexState = {
    -1, -1, -1, -1, -1, -1, -1, 1, 2, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1,
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1,
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1,
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1,
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1,
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1,
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1,
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1,
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1,
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1,
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  };

  static final long[] jjtoToken = {
    0xfffffffffffff001L, 0xffffffffffffffffL, 0xe11c03ffffffffffL, 0xffffffffffffffffL, 0x3fff3fffL,
  };
  static final long[] jjtoSkip = {
    0x67eL, 0x0L, 0x0L, 0x0L, 0x0L,
  };
  static final long[] jjtoSpecial = {
    0x600L, 0x0L, 0x0L, 0x0L, 0x0L,
  };
  static final long[] jjtoMore = {
    0x980L, 0x0L, 0x0L, 0x0L, 0x0L,
  };
  protected CharStream input_stream;

  private final int[] jjrounds = new int[301];
  private final int[] jjstateSet = new int[2 * 301];
  private final StringBuilder jjimage = new StringBuilder();
  private StringBuilder image = jjimage;
  private int jjimageLen;
  private int lengthOfMatch;
  protected int curChar;
}
