/* Generated By:JJTree&JavaCC: Do not edit this line. OrientSqlConstants.java */
package com.orientechnologies.orient.core.sql.parser;

/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface OrientSqlConstants {

  /** End of File. */
  int EOF = 0;

  /** RegularExpression Id. */
  int FORMAL_COMMENT = 9;

  /** RegularExpression Id. */
  int MULTI_LINE_COMMENT = 10;

  /** RegularExpression Id. */
  int SELECT = 12;

  /** RegularExpression Id. */
  int TRAVERSE = 13;

  /** RegularExpression Id. */
  int MATCH = 14;

  /** RegularExpression Id. */
  int INSERT = 15;

  /** RegularExpression Id. */
  int CREATE = 16;

  /** RegularExpression Id. */
  int DELETE = 17;

  /** RegularExpression Id. */
  int VERTEX = 18;

  /** RegularExpression Id. */
  int EDGE = 19;

  /** RegularExpression Id. */
  int UPDATE = 20;

  /** RegularExpression Id. */
  int UPSERT = 21;

  /** RegularExpression Id. */
  int FROM = 22;

  /** RegularExpression Id. */
  int TO = 23;

  /** RegularExpression Id. */
  int WHERE = 24;

  /** RegularExpression Id. */
  int WHILE = 25;

  /** RegularExpression Id. */
  int INTO = 26;

  /** RegularExpression Id. */
  int VALUE = 27;

  /** RegularExpression Id. */
  int VALUES = 28;

  /** RegularExpression Id. */
  int SET = 29;

  /** RegularExpression Id. */
  int ADD = 30;

  /** RegularExpression Id. */
  int PUT = 31;

  /** RegularExpression Id. */
  int MERGE = 32;

  /** RegularExpression Id. */
  int CONTENT = 33;

  /** RegularExpression Id. */
  int REMOVE = 34;

  /** RegularExpression Id. */
  int INCREMENT = 35;

  /** RegularExpression Id. */
  int AND = 36;

  /** RegularExpression Id. */
  int OR = 37;

  /** RegularExpression Id. */
  int NULL = 38;

  /** RegularExpression Id. */
  int DEFINED = 39;

  /** RegularExpression Id. */
  int ORDER = 40;

  /** RegularExpression Id. */
  int GROUP = 41;

  /** RegularExpression Id. */
  int BY = 42;

  /** RegularExpression Id. */
  int LIMIT = 43;

  /** RegularExpression Id. */
  int SKIP2 = 44;

  /** RegularExpression Id. */
  int BATCH = 45;

  /** RegularExpression Id. */
  int OFFSET = 46;

  /** RegularExpression Id. */
  int TIMEOUT = 47;

  /** RegularExpression Id. */
  int ASC = 48;

  /** RegularExpression Id. */
  int AS = 49;

  /** RegularExpression Id. */
  int DESC = 50;

  /** RegularExpression Id. */
  int FETCHPLAN = 51;

  /** RegularExpression Id. */
  int RETURN = 52;

  /** RegularExpression Id. */
  int BEFORE = 53;

  /** RegularExpression Id. */
  int AFTER = 54;

  /** RegularExpression Id. */
  int LOCK = 55;

  /** RegularExpression Id. */
  int RECORD = 56;

  /** RegularExpression Id. */
  int WAIT = 57;

  /** RegularExpression Id. */
  int RETRY = 58;

  /** RegularExpression Id. */
  int LET = 59;

  /** RegularExpression Id. */
  int CACHE = 60;

  /** RegularExpression Id. */
  int CYCLE = 61;

  /** RegularExpression Id. */
  int NOCACHE = 62;

  /** RegularExpression Id. */
  int NOLIMIT = 63;

  /** RegularExpression Id. */
  int NOCYCLE = 64;

  /** RegularExpression Id. */
  int UNSAFE = 65;

  /** RegularExpression Id. */
  int PARALLEL = 66;

  /** RegularExpression Id. */
  int STRATEGY = 67;

  /** RegularExpression Id. */
  int DEPTH_FIRST = 68;

  /** RegularExpression Id. */
  int BREADTH_FIRST = 69;

  /** RegularExpression Id. */
  int LUCENE = 70;

  /** RegularExpression Id. */
  int NEAR = 71;

  /** RegularExpression Id. */
  int WITHIN = 72;

  /** RegularExpression Id. */
  int UNWIND = 73;

  /** RegularExpression Id. */
  int MAXDEPTH = 74;

  /** RegularExpression Id. */
  int MINDEPTH = 75;

  /** RegularExpression Id. */
  int CLASS = 76;

  /** RegularExpression Id. */
  int SUPERCLASS = 77;

  /** RegularExpression Id. */
  int CLASSES = 78;

  /** RegularExpression Id. */
  int SUPERCLASSES = 79;

  /** RegularExpression Id. */
  int VIEW = 80;

  /** RegularExpression Id. */
  int UPDATABLE = 81;

  /** RegularExpression Id. */
  int EXCEPTION = 82;

  /** RegularExpression Id. */
  int PROFILE = 83;

  /** RegularExpression Id. */
  int STORAGE = 84;

  /** RegularExpression Id. */
  int ON = 85;

  /** RegularExpression Id. */
  int OFF = 86;

  /** RegularExpression Id. */
  int TRUNCATE = 87;

  /** RegularExpression Id. */
  int POLYMORPHIC = 88;

  /** RegularExpression Id. */
  int FIND = 89;

  /** RegularExpression Id. */
  int REFERENCES = 90;

  /** RegularExpression Id. */
  int EXTENDS = 91;

  /** RegularExpression Id. */
  int CLUSTERS = 92;

  /** RegularExpression Id. */
  int ABSTRACT = 93;

  /** RegularExpression Id. */
  int ALTER = 94;

  /** RegularExpression Id. */
  int NAME = 95;

  /** RegularExpression Id. */
  int SHORTNAME = 96;

  /** RegularExpression Id. */
  int OVERSIZE = 97;

  /** RegularExpression Id. */
  int STRICTMODE = 98;

  /** RegularExpression Id. */
  int ADDCLUSTER = 99;

  /** RegularExpression Id. */
  int REMOVECLUSTER = 100;

  /** RegularExpression Id. */
  int CUSTOM = 101;

  /** RegularExpression Id. */
  int CLUSTERSELECTION = 102;

  /** RegularExpression Id. */
  int DESCRIPTION = 103;

  /** RegularExpression Id. */
  int ENCRYPTION = 104;

  /** RegularExpression Id. */
  int DROP = 105;

  /** RegularExpression Id. */
  int PROPERTY = 106;

  /** RegularExpression Id. */
  int FORCE = 107;

  /** RegularExpression Id. */
  int METADATA = 108;

  /** RegularExpression Id. */
  int INDEX = 109;

  /** RegularExpression Id. */
  int COLLATE = 110;

  /** RegularExpression Id. */
  int ENGINE = 111;

  /** RegularExpression Id. */
  int REBUILD = 112;

  /** RegularExpression Id. */
  int ID = 113;

  /** RegularExpression Id. */
  int DATABASE = 114;

  /** RegularExpression Id. */
  int OPTIMIZE = 115;

  /** RegularExpression Id. */
  int LINK = 116;

  /** RegularExpression Id. */
  int TYPE = 117;

  /** RegularExpression Id. */
  int INVERSE = 118;

  /** RegularExpression Id. */
  int EXPLAIN = 119;

  /** RegularExpression Id. */
  int GRANT = 120;

  /** RegularExpression Id. */
  int REVOKE = 121;

  /** RegularExpression Id. */
  int READ = 122;

  /** RegularExpression Id. */
  int EXECUTE = 123;

  /** RegularExpression Id. */
  int ALL = 124;

  /** RegularExpression Id. */
  int NONE = 125;

  /** RegularExpression Id. */
  int FUNCTION = 126;

  /** RegularExpression Id. */
  int PARAMETERS = 127;

  /** RegularExpression Id. */
  int IDEMPOTENT = 128;

  /** RegularExpression Id. */
  int LANGUAGE = 129;

  /** RegularExpression Id. */
  int BEGIN = 130;

  /** RegularExpression Id. */
  int COMMIT = 131;

  /** RegularExpression Id. */
  int ROLLBACK = 132;

  /** RegularExpression Id. */
  int IF = 133;

  /** RegularExpression Id. */
  int ELSE = 134;

  /** RegularExpression Id. */
  int CONTINUE = 135;

  /** RegularExpression Id. */
  int FAIL = 136;

  /** RegularExpression Id. */
  int ISOLATION = 137;

  /** RegularExpression Id. */
  int SLEEP = 138;

  /** RegularExpression Id. */
  int CONSOLE = 139;

  /** RegularExpression Id. */
  int BLOB = 140;

  /** RegularExpression Id. */
  int SHARED = 141;

  /** RegularExpression Id. */
  int DEFAULT_ = 142;

  /** RegularExpression Id. */
  int SEQUENCE = 143;

  /** RegularExpression Id. */
  int START = 144;

  /** RegularExpression Id. */
  int OPTIONAL = 145;

  /** RegularExpression Id. */
  int COUNT = 146;

  /** RegularExpression Id. */
  int DISTINCT = 147;

  /** RegularExpression Id. */
  int HA = 148;

  /** RegularExpression Id. */
  int STATUS = 149;

  /** RegularExpression Id. */
  int SERVER = 150;

  /** RegularExpression Id. */
  int SYNC = 151;

  /** RegularExpression Id. */
  int EXISTS = 152;

  /** RegularExpression Id. */
  int FOREACH = 153;

  /** RegularExpression Id. */
  int MOVE = 154;

  /** RegularExpression Id. */
  int DEPTH_ALIAS = 155;

  /** RegularExpression Id. */
  int PATH_ALIAS = 156;

  /** RegularExpression Id. */
  int IDENTIFIED = 157;

  /** RegularExpression Id. */
  int ROLE = 158;

  /** RegularExpression Id. */
  int USER = 159;

  /** RegularExpression Id. */
  int USERS = 160;

  /** RegularExpression Id. */
  int RID = 161;

  /** RegularExpression Id. */
  int SECURITY = 162;

  /** RegularExpression Id. */
  int POLICY = 163;

  /** RegularExpression Id. */
  int DEFAULTCLUSTER = 164;

  /** RegularExpression Id. */
  int SYSTEM = 165;

  /** RegularExpression Id. */
  int THIS = 166;

  /** RegularExpression Id. */
  int RECORD_ATTRIBUTE = 167;

  /** RegularExpression Id. */
  int RID_ATTR = 168;

  /** RegularExpression Id. */
  int RID_STRING = 169;

  /** RegularExpression Id. */
  int CLASS_ATTR = 170;

  /** RegularExpression Id. */
  int VERSION_ATTR = 171;

  /** RegularExpression Id. */
  int SIZE_ATTR = 172;

  /** RegularExpression Id. */
  int TYPE_ATTR = 173;

  /** RegularExpression Id. */
  int RAW_ATTR = 174;

  /** RegularExpression Id. */
  int RID_ID_ATTR = 175;

  /** RegularExpression Id. */
  int RID_POS_ATTR = 176;

  /** RegularExpression Id. */
  int FIELDS_ATTR = 177;

  /** RegularExpression Id. */
  int TRUE = 178;

  /** RegularExpression Id. */
  int FALSE = 179;

  /** RegularExpression Id. */
  int INTEGER_LITERAL = 180;

  /** RegularExpression Id. */
  int DECIMAL_LITERAL = 181;

  /** RegularExpression Id. */
  int HEX_LITERAL = 182;

  /** RegularExpression Id. */
  int OCTAL_LITERAL = 183;

  /** RegularExpression Id. */
  int FLOATING_POINT_LITERAL = 184;

  /** RegularExpression Id. */
  int DECIMAL_FLOATING_POINT_LITERAL = 185;

  /** RegularExpression Id. */
  int DECIMAL_EXPONENT = 186;

  /** RegularExpression Id. */
  int HEXADECIMAL_FLOATING_POINT_LITERAL = 187;

  /** RegularExpression Id. */
  int HEXADECIMAL_EXPONENT = 188;

  /** RegularExpression Id. */
  int CHARACTER_LITERAL = 189;

  /** RegularExpression Id. */
  int STRING_LITERAL = 190;

  /** RegularExpression Id. */
  int INTEGER_RANGE = 191;

  /** RegularExpression Id. */
  int ELLIPSIS_INTEGER_RANGE = 192;

  /** RegularExpression Id. */
  int LPAREN = 193;

  /** RegularExpression Id. */
  int RPAREN = 194;

  /** RegularExpression Id. */
  int LBRACE = 195;

  /** RegularExpression Id. */
  int RBRACE = 196;

  /** RegularExpression Id. */
  int LBRACKET = 197;

  /** RegularExpression Id. */
  int RBRACKET = 198;

  /** RegularExpression Id. */
  int SEMICOLON = 199;

  /** RegularExpression Id. */
  int COMMA = 200;

  /** RegularExpression Id. */
  int DOT = 201;

  /** RegularExpression Id. */
  int AT = 202;

  /** RegularExpression Id. */
  int DOLLAR = 203;

  /** RegularExpression Id. */
  int BACKTICK = 204;

  /** RegularExpression Id. */
  int EQ = 205;

  /** RegularExpression Id. */
  int EQEQ = 206;

  /** RegularExpression Id. */
  int LT = 207;

  /** RegularExpression Id. */
  int GT = 208;

  /** RegularExpression Id. */
  int BANG = 209;

  /** RegularExpression Id. */
  int TILDE = 210;

  /** RegularExpression Id. */
  int HOOK = 211;

  /** RegularExpression Id. */
  int COLON = 212;

  /** RegularExpression Id. */
  int LE = 213;

  /** RegularExpression Id. */
  int GE = 214;

  /** RegularExpression Id. */
  int NE = 215;

  /** RegularExpression Id. */
  int NEQ = 216;

  /** RegularExpression Id. */
  int SC_OR = 217;

  /** RegularExpression Id. */
  int SC_AND = 218;

  /** RegularExpression Id. */
  int INCR = 219;

  /** RegularExpression Id. */
  int DECR = 220;

  /** RegularExpression Id. */
  int PLUS = 221;

  /** RegularExpression Id. */
  int MINUS = 222;

  /** RegularExpression Id. */
  int STAR = 223;

  /** RegularExpression Id. */
  int SLASH = 224;

  /** RegularExpression Id. */
  int BIT_AND = 225;

  /** RegularExpression Id. */
  int NULL_COALESCING = 226;

  /** RegularExpression Id. */
  int BIT_OR = 227;

  /** RegularExpression Id. */
  int XOR = 228;

  /** RegularExpression Id. */
  int REM = 229;

  /** RegularExpression Id. */
  int LSHIFT = 230;

  /** RegularExpression Id. */
  int PLUSASSIGN = 231;

  /** RegularExpression Id. */
  int MINUSASSIGN = 232;

  /** RegularExpression Id. */
  int STARASSIGN = 233;

  /** RegularExpression Id. */
  int SLASHASSIGN = 234;

  /** RegularExpression Id. */
  int ANDASSIGN = 235;

  /** RegularExpression Id. */
  int ORASSIGN = 236;

  /** RegularExpression Id. */
  int XORASSIGN = 237;

  /** RegularExpression Id. */
  int REMASSIGN = 238;

  /** RegularExpression Id. */
  int LSHIFTASSIGN = 239;

  /** RegularExpression Id. */
  int RSIGNEDSHIFTASSIGN = 240;

  /** RegularExpression Id. */
  int RUNSIGNEDSHIFTASSIGN = 241;

  /** RegularExpression Id. */
  int RSHIFT = 242;

  /** RegularExpression Id. */
  int RUNSIGNEDSHIFT = 243;

  /** RegularExpression Id. */
  int ELLIPSIS = 244;

  /** RegularExpression Id. */
  int RANGE = 245;

  /** RegularExpression Id. */
  int NOT = 246;

  /** RegularExpression Id. */
  int IN = 247;

  /** RegularExpression Id. */
  int LIKE = 248;

  /** RegularExpression Id. */
  int IS = 249;

  /** RegularExpression Id. */
  int BETWEEN = 250;

  /** RegularExpression Id. */
  int CONTAINS = 251;

  /** RegularExpression Id. */
  int CONTAINSALL = 252;

  /** RegularExpression Id. */
  int CONTAINSANY = 253;

  /** RegularExpression Id. */
  int CONTAINSKEY = 254;

  /** RegularExpression Id. */
  int CONTAINSVALUE = 255;

  /** RegularExpression Id. */
  int CONTAINSTEXT = 256;

  /** RegularExpression Id. */
  int MATCHES = 257;

  /** RegularExpression Id. */
  int KEY = 258;

  /** RegularExpression Id. */
  int INSTANCEOF = 259;

  /** RegularExpression Id. */
  int CLUSTER = 260;

  /** RegularExpression Id. */
  int IDENTIFIER = 261;

  /** RegularExpression Id. */
  int QUOTED_IDENTIFIER = 262;

  /** RegularExpression Id. */
  int INDEX_COLON = 263;

  /** RegularExpression Id. */
  int INDEXVALUES_IDENTIFIER = 264;

  /** RegularExpression Id. */
  int INDEXVALUESASC_IDENTIFIER = 265;

  /** RegularExpression Id. */
  int INDEXVALUESDESC_IDENTIFIER = 266;

  /** RegularExpression Id. */
  int CLUSTER_IDENTIFIER = 267;

  /** RegularExpression Id. */
  int CLUSTER_NUMBER_IDENTIFIER = 268;

  /** RegularExpression Id. */
  int METADATA_IDENTIFIER = 269;

  /** RegularExpression Id. */
  int LETTER = 270;

  /** RegularExpression Id. */
  int PART_LETTER = 271;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Lexical state. */
  int IN_FORMAL_COMMENT = 1;

  /** Lexical state. */
  int IN_MULTI_LINE_COMMENT = 2;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "\"\\f\"",
    "\"\\b\"",
    "<token of kind 7>",
    "\"/*\"",
    "\"*/\"",
    "\"*/\"",
    "<token of kind 11>",
    "\"select\"",
    "\"traverse\"",
    "\"match\"",
    "\"insert\"",
    "\"create\"",
    "\"delete\"",
    "\"vertex\"",
    "\"edge\"",
    "\"update\"",
    "\"upsert\"",
    "\"from\"",
    "\"to\"",
    "\"where\"",
    "\"while\"",
    "\"into\"",
    "\"value\"",
    "\"values\"",
    "\"set\"",
    "\"add\"",
    "\"put\"",
    "\"merge\"",
    "\"content\"",
    "\"remove\"",
    "\"increment\"",
    "\"and\"",
    "\"or\"",
    "\"null\"",
    "\"defined\"",
    "\"order\"",
    "\"group\"",
    "\"by\"",
    "\"limit\"",
    "\"skip\"",
    "\"batch\"",
    "\"offset\"",
    "\"timeout\"",
    "\"asc\"",
    "\"as\"",
    "\"desc\"",
    "\"fetchplan\"",
    "\"return\"",
    "\"before\"",
    "\"after\"",
    "\"lock\"",
    "\"record\"",
    "\"wait\"",
    "\"retry\"",
    "\"let\"",
    "\"cache\"",
    "\"cycle\"",
    "\"nocache\"",
    "\"nolimit\"",
    "\"nocycle\"",
    "\"unsafe\"",
    "\"parallel\"",
    "\"strategy\"",
    "\"depth_first\"",
    "\"breadth_first\"",
    "\"lucene\"",
    "\"near\"",
    "\"within\"",
    "\"unwind\"",
    "\"maxdepth\"",
    "\"mindepth\"",
    "\"class\"",
    "\"superclass\"",
    "\"classes\"",
    "\"superclasses\"",
    "\"view\"",
    "\"updatable\"",
    "\"exception\"",
    "\"profile\"",
    "\"storage\"",
    "\"on\"",
    "\"off\"",
    "\"truncate\"",
    "\"polymorphic\"",
    "\"find\"",
    "\"references\"",
    "\"extends\"",
    "\"clusters\"",
    "\"abstract\"",
    "\"alter\"",
    "\"name\"",
    "\"shortname\"",
    "\"oversize\"",
    "\"strictmode\"",
    "\"addcluster\"",
    "\"removecluster\"",
    "\"custom\"",
    "\"clusterselection\"",
    "\"description\"",
    "\"encryption\"",
    "\"drop\"",
    "\"property\"",
    "\"force\"",
    "\"metadata\"",
    "\"index\"",
    "\"collate\"",
    "\"engine\"",
    "\"rebuild\"",
    "\"id\"",
    "\"database\"",
    "\"optimize\"",
    "\"link\"",
    "\"type\"",
    "\"inverse\"",
    "\"explain\"",
    "\"grant\"",
    "\"revoke\"",
    "\"read\"",
    "\"execute\"",
    "\"all\"",
    "\"none\"",
    "\"function\"",
    "\"parameters\"",
    "\"idempotent\"",
    "\"language\"",
    "\"begin\"",
    "\"commit\"",
    "\"rollback\"",
    "\"if\"",
    "\"else\"",
    "\"continue\"",
    "\"fail\"",
    "\"isolation\"",
    "\"sleep\"",
    "\"console\"",
    "\"blob\"",
    "\"shared\"",
    "\"default\"",
    "\"sequence\"",
    "\"start\"",
    "\"optional\"",
    "\"count\"",
    "\"distinct\"",
    "\"ha\"",
    "\"status\"",
    "\"server\"",
    "\"sync\"",
    "\"exists\"",
    "\"foreach\"",
    "\"move\"",
    "\"depthalias\"",
    "\"pathalias\"",
    "\"identified\"",
    "\"role\"",
    "\"user\"",
    "\"users\"",
    "\"rid\"",
    "\"security\"",
    "\"policy\"",
    "\"defaultcluster\"",
    "\"system\"",
    "\"@this\"",
    "<RECORD_ATTRIBUTE>",
    "\"@rid\"",
    "\"\\\"@rid\\\"\"",
    "\"@class\"",
    "\"@version\"",
    "\"@size\"",
    "\"@type\"",
    "\"@raw\"",
    "\"@rid_id\"",
    "\"@rid_pos\"",
    "\"@fields\"",
    "\"true\"",
    "\"false\"",
    "<INTEGER_LITERAL>",
    "<DECIMAL_LITERAL>",
    "<HEX_LITERAL>",
    "<OCTAL_LITERAL>",
    "<FLOATING_POINT_LITERAL>",
    "<DECIMAL_FLOATING_POINT_LITERAL>",
    "<DECIMAL_EXPONENT>",
    "<HEXADECIMAL_FLOATING_POINT_LITERAL>",
    "<HEXADECIMAL_EXPONENT>",
    "<CHARACTER_LITERAL>",
    "<STRING_LITERAL>",
    "<INTEGER_RANGE>",
    "<ELLIPSIS_INTEGER_RANGE>",
    "\"(\"",
    "\")\"",
    "\"{\"",
    "\"}\"",
    "\"[\"",
    "\"]\"",
    "\";\"",
    "\",\"",
    "\".\"",
    "\"@\"",
    "\"$\"",
    "\"`\"",
    "\"=\"",
    "\"==\"",
    "\"<\"",
    "\">\"",
    "\"!\"",
    "\"~\"",
    "\"?\"",
    "\":\"",
    "\"<=\"",
    "\">=\"",
    "\"!=\"",
    "\"<>\"",
    "\"||\"",
    "\"&&\"",
    "\"++\"",
    "\"--\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"&\"",
    "\"??\"",
    "\"|\"",
    "\"^\"",
    "\"%\"",
    "\"<<\"",
    "\"+=\"",
    "\"-=\"",
    "\"*=\"",
    "\"/=\"",
    "\"&=\"",
    "\"|=\"",
    "\"^=\"",
    "\"%=\"",
    "\"<<=\"",
    "\">>=\"",
    "\">>>=\"",
    "\">>\"",
    "\">>>\"",
    "\"...\"",
    "\"..\"",
    "\"not\"",
    "\"in\"",
    "\"like\"",
    "\"is\"",
    "\"between\"",
    "\"contains\"",
    "\"containsall\"",
    "\"containsany\"",
    "\"containskey\"",
    "\"containsvalue\"",
    "\"containstext\"",
    "\"matches\"",
    "\"key\"",
    "\"instanceof\"",
    "\"cluster\"",
    "<IDENTIFIER>",
    "<QUOTED_IDENTIFIER>",
    "<INDEX_COLON>",
    "<INDEXVALUES_IDENTIFIER>",
    "<INDEXVALUESASC_IDENTIFIER>",
    "<INDEXVALUESDESC_IDENTIFIER>",
    "<CLUSTER_IDENTIFIER>",
    "<CLUSTER_NUMBER_IDENTIFIER>",
    "<METADATA_IDENTIFIER>",
    "<LETTER>",
    "<PART_LETTER>",
    "\"#\"",
    "\"__@recordmap@___\"",
    "\"round-robin\"",
    "\"-servers\"",
    "\"-db\"",
    "\"-latency\"",
    "\"-messages\"",
    "\"-locks\"",
    "\"-all\"",
    "\"-output=text\"",
    "\"-force\"",
    "\"-full\"",
    "\"-full_replace\"",
    "\"-merge\"",
  };
}
